
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Topping
 * 
 */
export type Topping = $Result.DefaultSelection<Prisma.$ToppingPayload>
/**
 * Model Pizza
 * 
 */
export type Pizza = $Result.DefaultSelection<Prisma.$PizzaPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model PizzaToppings
 * 
 */
export type PizzaToppings = $Result.DefaultSelection<Prisma.$PizzaToppingsPayload>
/**
 * Model OrderPizzas
 * 
 */
export type OrderPizzas = $Result.DefaultSelection<Prisma.$OrderPizzasPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.topping`: Exposes CRUD operations for the **Topping** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Toppings
    * const toppings = await prisma.topping.findMany()
    * ```
    */
  get topping(): Prisma.ToppingDelegate<ExtArgs>;

  /**
   * `prisma.pizza`: Exposes CRUD operations for the **Pizza** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pizzas
    * const pizzas = await prisma.pizza.findMany()
    * ```
    */
  get pizza(): Prisma.PizzaDelegate<ExtArgs>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs>;

  /**
   * `prisma.pizzaToppings`: Exposes CRUD operations for the **PizzaToppings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PizzaToppings
    * const pizzaToppings = await prisma.pizzaToppings.findMany()
    * ```
    */
  get pizzaToppings(): Prisma.PizzaToppingsDelegate<ExtArgs>;

  /**
   * `prisma.orderPizzas`: Exposes CRUD operations for the **OrderPizzas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderPizzas
    * const orderPizzas = await prisma.orderPizzas.findMany()
    * ```
    */
  get orderPizzas(): Prisma.OrderPizzasDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.1
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Topping: 'Topping',
    Pizza: 'Pizza',
    Order: 'Order',
    PizzaToppings: 'PizzaToppings',
    OrderPizzas: 'OrderPizzas'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "topping" | "pizza" | "order" | "pizzaToppings" | "orderPizzas"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Topping: {
        payload: Prisma.$ToppingPayload<ExtArgs>
        fields: Prisma.ToppingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ToppingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToppingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ToppingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToppingPayload>
          }
          findFirst: {
            args: Prisma.ToppingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToppingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ToppingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToppingPayload>
          }
          findMany: {
            args: Prisma.ToppingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToppingPayload>[]
          }
          create: {
            args: Prisma.ToppingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToppingPayload>
          }
          createMany: {
            args: Prisma.ToppingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ToppingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToppingPayload>[]
          }
          delete: {
            args: Prisma.ToppingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToppingPayload>
          }
          update: {
            args: Prisma.ToppingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToppingPayload>
          }
          deleteMany: {
            args: Prisma.ToppingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ToppingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ToppingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ToppingPayload>
          }
          aggregate: {
            args: Prisma.ToppingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTopping>
          }
          groupBy: {
            args: Prisma.ToppingGroupByArgs<ExtArgs>
            result: $Utils.Optional<ToppingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ToppingCountArgs<ExtArgs>
            result: $Utils.Optional<ToppingCountAggregateOutputType> | number
          }
        }
      }
      Pizza: {
        payload: Prisma.$PizzaPayload<ExtArgs>
        fields: Prisma.PizzaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PizzaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PizzaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaPayload>
          }
          findFirst: {
            args: Prisma.PizzaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PizzaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaPayload>
          }
          findMany: {
            args: Prisma.PizzaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaPayload>[]
          }
          create: {
            args: Prisma.PizzaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaPayload>
          }
          createMany: {
            args: Prisma.PizzaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PizzaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaPayload>[]
          }
          delete: {
            args: Prisma.PizzaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaPayload>
          }
          update: {
            args: Prisma.PizzaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaPayload>
          }
          deleteMany: {
            args: Prisma.PizzaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PizzaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PizzaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaPayload>
          }
          aggregate: {
            args: Prisma.PizzaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePizza>
          }
          groupBy: {
            args: Prisma.PizzaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PizzaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PizzaCountArgs<ExtArgs>
            result: $Utils.Optional<PizzaCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      PizzaToppings: {
        payload: Prisma.$PizzaToppingsPayload<ExtArgs>
        fields: Prisma.PizzaToppingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PizzaToppingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaToppingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PizzaToppingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaToppingsPayload>
          }
          findFirst: {
            args: Prisma.PizzaToppingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaToppingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PizzaToppingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaToppingsPayload>
          }
          findMany: {
            args: Prisma.PizzaToppingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaToppingsPayload>[]
          }
          create: {
            args: Prisma.PizzaToppingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaToppingsPayload>
          }
          createMany: {
            args: Prisma.PizzaToppingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PizzaToppingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaToppingsPayload>[]
          }
          delete: {
            args: Prisma.PizzaToppingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaToppingsPayload>
          }
          update: {
            args: Prisma.PizzaToppingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaToppingsPayload>
          }
          deleteMany: {
            args: Prisma.PizzaToppingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PizzaToppingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PizzaToppingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PizzaToppingsPayload>
          }
          aggregate: {
            args: Prisma.PizzaToppingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePizzaToppings>
          }
          groupBy: {
            args: Prisma.PizzaToppingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PizzaToppingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PizzaToppingsCountArgs<ExtArgs>
            result: $Utils.Optional<PizzaToppingsCountAggregateOutputType> | number
          }
        }
      }
      OrderPizzas: {
        payload: Prisma.$OrderPizzasPayload<ExtArgs>
        fields: Prisma.OrderPizzasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderPizzasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPizzasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderPizzasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPizzasPayload>
          }
          findFirst: {
            args: Prisma.OrderPizzasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPizzasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderPizzasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPizzasPayload>
          }
          findMany: {
            args: Prisma.OrderPizzasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPizzasPayload>[]
          }
          create: {
            args: Prisma.OrderPizzasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPizzasPayload>
          }
          createMany: {
            args: Prisma.OrderPizzasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderPizzasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPizzasPayload>[]
          }
          delete: {
            args: Prisma.OrderPizzasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPizzasPayload>
          }
          update: {
            args: Prisma.OrderPizzasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPizzasPayload>
          }
          deleteMany: {
            args: Prisma.OrderPizzasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderPizzasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderPizzasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPizzasPayload>
          }
          aggregate: {
            args: Prisma.OrderPizzasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderPizzas>
          }
          groupBy: {
            args: Prisma.OrderPizzasGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderPizzasGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderPizzasCountArgs<ExtArgs>
            result: $Utils.Optional<OrderPizzasCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    orders: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Count Type ToppingCountOutputType
   */

  export type ToppingCountOutputType = {
    pizzas: number
  }

  export type ToppingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pizzas?: boolean | ToppingCountOutputTypeCountPizzasArgs
  }

  // Custom InputTypes
  /**
   * ToppingCountOutputType without action
   */
  export type ToppingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ToppingCountOutputType
     */
    select?: ToppingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ToppingCountOutputType without action
   */
  export type ToppingCountOutputTypeCountPizzasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PizzaToppingsWhereInput
  }


  /**
   * Count Type PizzaCountOutputType
   */

  export type PizzaCountOutputType = {
    toppings: number
    orders: number
  }

  export type PizzaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    toppings?: boolean | PizzaCountOutputTypeCountToppingsArgs
    orders?: boolean | PizzaCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * PizzaCountOutputType without action
   */
  export type PizzaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzaCountOutputType
     */
    select?: PizzaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PizzaCountOutputType without action
   */
  export type PizzaCountOutputTypeCountToppingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PizzaToppingsWhereInput
  }

  /**
   * PizzaCountOutputType without action
   */
  export type PizzaCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderPizzasWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    pizzas: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pizzas?: boolean | OrderCountOutputTypeCountPizzasArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountPizzasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderPizzasWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    invited: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    invited: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    invited: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    invited?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    invited?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    invited?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    invited: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    invited?: boolean
    orders?: boolean | User$ordersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    invited?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    invited?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | User$ordersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      invited: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends User$ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly invited: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.orders
   */
  export type User$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Topping
   */

  export type AggregateTopping = {
    _count: ToppingCountAggregateOutputType | null
    _avg: ToppingAvgAggregateOutputType | null
    _sum: ToppingSumAggregateOutputType | null
    _min: ToppingMinAggregateOutputType | null
    _max: ToppingMaxAggregateOutputType | null
  }

  export type ToppingAvgAggregateOutputType = {
    id: number | null
  }

  export type ToppingSumAggregateOutputType = {
    id: number | null
  }

  export type ToppingMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ToppingMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ToppingCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ToppingAvgAggregateInputType = {
    id?: true
  }

  export type ToppingSumAggregateInputType = {
    id?: true
  }

  export type ToppingMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ToppingMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ToppingCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ToppingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Topping to aggregate.
     */
    where?: ToppingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Toppings to fetch.
     */
    orderBy?: ToppingOrderByWithRelationInput | ToppingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ToppingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Toppings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Toppings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Toppings
    **/
    _count?: true | ToppingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ToppingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ToppingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ToppingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ToppingMaxAggregateInputType
  }

  export type GetToppingAggregateType<T extends ToppingAggregateArgs> = {
        [P in keyof T & keyof AggregateTopping]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTopping[P]>
      : GetScalarType<T[P], AggregateTopping[P]>
  }




  export type ToppingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ToppingWhereInput
    orderBy?: ToppingOrderByWithAggregationInput | ToppingOrderByWithAggregationInput[]
    by: ToppingScalarFieldEnum[] | ToppingScalarFieldEnum
    having?: ToppingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ToppingCountAggregateInputType | true
    _avg?: ToppingAvgAggregateInputType
    _sum?: ToppingSumAggregateInputType
    _min?: ToppingMinAggregateInputType
    _max?: ToppingMaxAggregateInputType
  }

  export type ToppingGroupByOutputType = {
    id: number
    name: string
    _count: ToppingCountAggregateOutputType | null
    _avg: ToppingAvgAggregateOutputType | null
    _sum: ToppingSumAggregateOutputType | null
    _min: ToppingMinAggregateOutputType | null
    _max: ToppingMaxAggregateOutputType | null
  }

  type GetToppingGroupByPayload<T extends ToppingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ToppingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ToppingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ToppingGroupByOutputType[P]>
            : GetScalarType<T[P], ToppingGroupByOutputType[P]>
        }
      >
    >


  export type ToppingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    pizzas?: boolean | Topping$pizzasArgs<ExtArgs>
    _count?: boolean | ToppingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["topping"]>

  export type ToppingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["topping"]>

  export type ToppingSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ToppingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pizzas?: boolean | Topping$pizzasArgs<ExtArgs>
    _count?: boolean | ToppingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ToppingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ToppingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Topping"
    objects: {
      pizzas: Prisma.$PizzaToppingsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["topping"]>
    composites: {}
  }

  type ToppingGetPayload<S extends boolean | null | undefined | ToppingDefaultArgs> = $Result.GetResult<Prisma.$ToppingPayload, S>

  type ToppingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ToppingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ToppingCountAggregateInputType | true
    }

  export interface ToppingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Topping'], meta: { name: 'Topping' } }
    /**
     * Find zero or one Topping that matches the filter.
     * @param {ToppingFindUniqueArgs} args - Arguments to find a Topping
     * @example
     * // Get one Topping
     * const topping = await prisma.topping.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ToppingFindUniqueArgs>(args: SelectSubset<T, ToppingFindUniqueArgs<ExtArgs>>): Prisma__ToppingClient<$Result.GetResult<Prisma.$ToppingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Topping that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ToppingFindUniqueOrThrowArgs} args - Arguments to find a Topping
     * @example
     * // Get one Topping
     * const topping = await prisma.topping.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ToppingFindUniqueOrThrowArgs>(args: SelectSubset<T, ToppingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ToppingClient<$Result.GetResult<Prisma.$ToppingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Topping that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToppingFindFirstArgs} args - Arguments to find a Topping
     * @example
     * // Get one Topping
     * const topping = await prisma.topping.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ToppingFindFirstArgs>(args?: SelectSubset<T, ToppingFindFirstArgs<ExtArgs>>): Prisma__ToppingClient<$Result.GetResult<Prisma.$ToppingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Topping that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToppingFindFirstOrThrowArgs} args - Arguments to find a Topping
     * @example
     * // Get one Topping
     * const topping = await prisma.topping.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ToppingFindFirstOrThrowArgs>(args?: SelectSubset<T, ToppingFindFirstOrThrowArgs<ExtArgs>>): Prisma__ToppingClient<$Result.GetResult<Prisma.$ToppingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Toppings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToppingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Toppings
     * const toppings = await prisma.topping.findMany()
     * 
     * // Get first 10 Toppings
     * const toppings = await prisma.topping.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const toppingWithIdOnly = await prisma.topping.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ToppingFindManyArgs>(args?: SelectSubset<T, ToppingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToppingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Topping.
     * @param {ToppingCreateArgs} args - Arguments to create a Topping.
     * @example
     * // Create one Topping
     * const Topping = await prisma.topping.create({
     *   data: {
     *     // ... data to create a Topping
     *   }
     * })
     * 
     */
    create<T extends ToppingCreateArgs>(args: SelectSubset<T, ToppingCreateArgs<ExtArgs>>): Prisma__ToppingClient<$Result.GetResult<Prisma.$ToppingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Toppings.
     * @param {ToppingCreateManyArgs} args - Arguments to create many Toppings.
     * @example
     * // Create many Toppings
     * const topping = await prisma.topping.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ToppingCreateManyArgs>(args?: SelectSubset<T, ToppingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Toppings and returns the data saved in the database.
     * @param {ToppingCreateManyAndReturnArgs} args - Arguments to create many Toppings.
     * @example
     * // Create many Toppings
     * const topping = await prisma.topping.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Toppings and only return the `id`
     * const toppingWithIdOnly = await prisma.topping.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ToppingCreateManyAndReturnArgs>(args?: SelectSubset<T, ToppingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ToppingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Topping.
     * @param {ToppingDeleteArgs} args - Arguments to delete one Topping.
     * @example
     * // Delete one Topping
     * const Topping = await prisma.topping.delete({
     *   where: {
     *     // ... filter to delete one Topping
     *   }
     * })
     * 
     */
    delete<T extends ToppingDeleteArgs>(args: SelectSubset<T, ToppingDeleteArgs<ExtArgs>>): Prisma__ToppingClient<$Result.GetResult<Prisma.$ToppingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Topping.
     * @param {ToppingUpdateArgs} args - Arguments to update one Topping.
     * @example
     * // Update one Topping
     * const topping = await prisma.topping.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ToppingUpdateArgs>(args: SelectSubset<T, ToppingUpdateArgs<ExtArgs>>): Prisma__ToppingClient<$Result.GetResult<Prisma.$ToppingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Toppings.
     * @param {ToppingDeleteManyArgs} args - Arguments to filter Toppings to delete.
     * @example
     * // Delete a few Toppings
     * const { count } = await prisma.topping.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ToppingDeleteManyArgs>(args?: SelectSubset<T, ToppingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Toppings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToppingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Toppings
     * const topping = await prisma.topping.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ToppingUpdateManyArgs>(args: SelectSubset<T, ToppingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Topping.
     * @param {ToppingUpsertArgs} args - Arguments to update or create a Topping.
     * @example
     * // Update or create a Topping
     * const topping = await prisma.topping.upsert({
     *   create: {
     *     // ... data to create a Topping
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Topping we want to update
     *   }
     * })
     */
    upsert<T extends ToppingUpsertArgs>(args: SelectSubset<T, ToppingUpsertArgs<ExtArgs>>): Prisma__ToppingClient<$Result.GetResult<Prisma.$ToppingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Toppings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToppingCountArgs} args - Arguments to filter Toppings to count.
     * @example
     * // Count the number of Toppings
     * const count = await prisma.topping.count({
     *   where: {
     *     // ... the filter for the Toppings we want to count
     *   }
     * })
    **/
    count<T extends ToppingCountArgs>(
      args?: Subset<T, ToppingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ToppingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Topping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToppingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ToppingAggregateArgs>(args: Subset<T, ToppingAggregateArgs>): Prisma.PrismaPromise<GetToppingAggregateType<T>>

    /**
     * Group by Topping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ToppingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ToppingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ToppingGroupByArgs['orderBy'] }
        : { orderBy?: ToppingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ToppingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetToppingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Topping model
   */
  readonly fields: ToppingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Topping.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ToppingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pizzas<T extends Topping$pizzasArgs<ExtArgs> = {}>(args?: Subset<T, Topping$pizzasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PizzaToppingsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Topping model
   */ 
  interface ToppingFieldRefs {
    readonly id: FieldRef<"Topping", 'Int'>
    readonly name: FieldRef<"Topping", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Topping findUnique
   */
  export type ToppingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topping
     */
    select?: ToppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToppingInclude<ExtArgs> | null
    /**
     * Filter, which Topping to fetch.
     */
    where: ToppingWhereUniqueInput
  }

  /**
   * Topping findUniqueOrThrow
   */
  export type ToppingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topping
     */
    select?: ToppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToppingInclude<ExtArgs> | null
    /**
     * Filter, which Topping to fetch.
     */
    where: ToppingWhereUniqueInput
  }

  /**
   * Topping findFirst
   */
  export type ToppingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topping
     */
    select?: ToppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToppingInclude<ExtArgs> | null
    /**
     * Filter, which Topping to fetch.
     */
    where?: ToppingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Toppings to fetch.
     */
    orderBy?: ToppingOrderByWithRelationInput | ToppingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Toppings.
     */
    cursor?: ToppingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Toppings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Toppings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Toppings.
     */
    distinct?: ToppingScalarFieldEnum | ToppingScalarFieldEnum[]
  }

  /**
   * Topping findFirstOrThrow
   */
  export type ToppingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topping
     */
    select?: ToppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToppingInclude<ExtArgs> | null
    /**
     * Filter, which Topping to fetch.
     */
    where?: ToppingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Toppings to fetch.
     */
    orderBy?: ToppingOrderByWithRelationInput | ToppingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Toppings.
     */
    cursor?: ToppingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Toppings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Toppings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Toppings.
     */
    distinct?: ToppingScalarFieldEnum | ToppingScalarFieldEnum[]
  }

  /**
   * Topping findMany
   */
  export type ToppingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topping
     */
    select?: ToppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToppingInclude<ExtArgs> | null
    /**
     * Filter, which Toppings to fetch.
     */
    where?: ToppingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Toppings to fetch.
     */
    orderBy?: ToppingOrderByWithRelationInput | ToppingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Toppings.
     */
    cursor?: ToppingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Toppings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Toppings.
     */
    skip?: number
    distinct?: ToppingScalarFieldEnum | ToppingScalarFieldEnum[]
  }

  /**
   * Topping create
   */
  export type ToppingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topping
     */
    select?: ToppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToppingInclude<ExtArgs> | null
    /**
     * The data needed to create a Topping.
     */
    data: XOR<ToppingCreateInput, ToppingUncheckedCreateInput>
  }

  /**
   * Topping createMany
   */
  export type ToppingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Toppings.
     */
    data: ToppingCreateManyInput | ToppingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Topping createManyAndReturn
   */
  export type ToppingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topping
     */
    select?: ToppingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Toppings.
     */
    data: ToppingCreateManyInput | ToppingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Topping update
   */
  export type ToppingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topping
     */
    select?: ToppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToppingInclude<ExtArgs> | null
    /**
     * The data needed to update a Topping.
     */
    data: XOR<ToppingUpdateInput, ToppingUncheckedUpdateInput>
    /**
     * Choose, which Topping to update.
     */
    where: ToppingWhereUniqueInput
  }

  /**
   * Topping updateMany
   */
  export type ToppingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Toppings.
     */
    data: XOR<ToppingUpdateManyMutationInput, ToppingUncheckedUpdateManyInput>
    /**
     * Filter which Toppings to update
     */
    where?: ToppingWhereInput
  }

  /**
   * Topping upsert
   */
  export type ToppingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topping
     */
    select?: ToppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToppingInclude<ExtArgs> | null
    /**
     * The filter to search for the Topping to update in case it exists.
     */
    where: ToppingWhereUniqueInput
    /**
     * In case the Topping found by the `where` argument doesn't exist, create a new Topping with this data.
     */
    create: XOR<ToppingCreateInput, ToppingUncheckedCreateInput>
    /**
     * In case the Topping was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ToppingUpdateInput, ToppingUncheckedUpdateInput>
  }

  /**
   * Topping delete
   */
  export type ToppingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topping
     */
    select?: ToppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToppingInclude<ExtArgs> | null
    /**
     * Filter which Topping to delete.
     */
    where: ToppingWhereUniqueInput
  }

  /**
   * Topping deleteMany
   */
  export type ToppingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Toppings to delete
     */
    where?: ToppingWhereInput
  }

  /**
   * Topping.pizzas
   */
  export type Topping$pizzasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzaToppings
     */
    select?: PizzaToppingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaToppingsInclude<ExtArgs> | null
    where?: PizzaToppingsWhereInput
    orderBy?: PizzaToppingsOrderByWithRelationInput | PizzaToppingsOrderByWithRelationInput[]
    cursor?: PizzaToppingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PizzaToppingsScalarFieldEnum | PizzaToppingsScalarFieldEnum[]
  }

  /**
   * Topping without action
   */
  export type ToppingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topping
     */
    select?: ToppingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ToppingInclude<ExtArgs> | null
  }


  /**
   * Model Pizza
   */

  export type AggregatePizza = {
    _count: PizzaCountAggregateOutputType | null
    _avg: PizzaAvgAggregateOutputType | null
    _sum: PizzaSumAggregateOutputType | null
    _min: PizzaMinAggregateOutputType | null
    _max: PizzaMaxAggregateOutputType | null
  }

  export type PizzaAvgAggregateOutputType = {
    id: number | null
  }

  export type PizzaSumAggregateOutputType = {
    id: number | null
  }

  export type PizzaMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type PizzaMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type PizzaCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type PizzaAvgAggregateInputType = {
    id?: true
  }

  export type PizzaSumAggregateInputType = {
    id?: true
  }

  export type PizzaMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type PizzaMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type PizzaCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type PizzaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pizza to aggregate.
     */
    where?: PizzaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pizzas to fetch.
     */
    orderBy?: PizzaOrderByWithRelationInput | PizzaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PizzaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pizzas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pizzas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pizzas
    **/
    _count?: true | PizzaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PizzaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PizzaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PizzaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PizzaMaxAggregateInputType
  }

  export type GetPizzaAggregateType<T extends PizzaAggregateArgs> = {
        [P in keyof T & keyof AggregatePizza]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePizza[P]>
      : GetScalarType<T[P], AggregatePizza[P]>
  }




  export type PizzaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PizzaWhereInput
    orderBy?: PizzaOrderByWithAggregationInput | PizzaOrderByWithAggregationInput[]
    by: PizzaScalarFieldEnum[] | PizzaScalarFieldEnum
    having?: PizzaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PizzaCountAggregateInputType | true
    _avg?: PizzaAvgAggregateInputType
    _sum?: PizzaSumAggregateInputType
    _min?: PizzaMinAggregateInputType
    _max?: PizzaMaxAggregateInputType
  }

  export type PizzaGroupByOutputType = {
    id: number
    name: string
    _count: PizzaCountAggregateOutputType | null
    _avg: PizzaAvgAggregateOutputType | null
    _sum: PizzaSumAggregateOutputType | null
    _min: PizzaMinAggregateOutputType | null
    _max: PizzaMaxAggregateOutputType | null
  }

  type GetPizzaGroupByPayload<T extends PizzaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PizzaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PizzaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PizzaGroupByOutputType[P]>
            : GetScalarType<T[P], PizzaGroupByOutputType[P]>
        }
      >
    >


  export type PizzaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    toppings?: boolean | Pizza$toppingsArgs<ExtArgs>
    orders?: boolean | Pizza$ordersArgs<ExtArgs>
    _count?: boolean | PizzaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pizza"]>

  export type PizzaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["pizza"]>

  export type PizzaSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type PizzaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    toppings?: boolean | Pizza$toppingsArgs<ExtArgs>
    orders?: boolean | Pizza$ordersArgs<ExtArgs>
    _count?: boolean | PizzaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PizzaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PizzaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pizza"
    objects: {
      toppings: Prisma.$PizzaToppingsPayload<ExtArgs>[]
      orders: Prisma.$OrderPizzasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["pizza"]>
    composites: {}
  }

  type PizzaGetPayload<S extends boolean | null | undefined | PizzaDefaultArgs> = $Result.GetResult<Prisma.$PizzaPayload, S>

  type PizzaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PizzaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PizzaCountAggregateInputType | true
    }

  export interface PizzaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pizza'], meta: { name: 'Pizza' } }
    /**
     * Find zero or one Pizza that matches the filter.
     * @param {PizzaFindUniqueArgs} args - Arguments to find a Pizza
     * @example
     * // Get one Pizza
     * const pizza = await prisma.pizza.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PizzaFindUniqueArgs>(args: SelectSubset<T, PizzaFindUniqueArgs<ExtArgs>>): Prisma__PizzaClient<$Result.GetResult<Prisma.$PizzaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Pizza that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PizzaFindUniqueOrThrowArgs} args - Arguments to find a Pizza
     * @example
     * // Get one Pizza
     * const pizza = await prisma.pizza.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PizzaFindUniqueOrThrowArgs>(args: SelectSubset<T, PizzaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PizzaClient<$Result.GetResult<Prisma.$PizzaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Pizza that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzaFindFirstArgs} args - Arguments to find a Pizza
     * @example
     * // Get one Pizza
     * const pizza = await prisma.pizza.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PizzaFindFirstArgs>(args?: SelectSubset<T, PizzaFindFirstArgs<ExtArgs>>): Prisma__PizzaClient<$Result.GetResult<Prisma.$PizzaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Pizza that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzaFindFirstOrThrowArgs} args - Arguments to find a Pizza
     * @example
     * // Get one Pizza
     * const pizza = await prisma.pizza.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PizzaFindFirstOrThrowArgs>(args?: SelectSubset<T, PizzaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PizzaClient<$Result.GetResult<Prisma.$PizzaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Pizzas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pizzas
     * const pizzas = await prisma.pizza.findMany()
     * 
     * // Get first 10 Pizzas
     * const pizzas = await prisma.pizza.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pizzaWithIdOnly = await prisma.pizza.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PizzaFindManyArgs>(args?: SelectSubset<T, PizzaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PizzaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Pizza.
     * @param {PizzaCreateArgs} args - Arguments to create a Pizza.
     * @example
     * // Create one Pizza
     * const Pizza = await prisma.pizza.create({
     *   data: {
     *     // ... data to create a Pizza
     *   }
     * })
     * 
     */
    create<T extends PizzaCreateArgs>(args: SelectSubset<T, PizzaCreateArgs<ExtArgs>>): Prisma__PizzaClient<$Result.GetResult<Prisma.$PizzaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Pizzas.
     * @param {PizzaCreateManyArgs} args - Arguments to create many Pizzas.
     * @example
     * // Create many Pizzas
     * const pizza = await prisma.pizza.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PizzaCreateManyArgs>(args?: SelectSubset<T, PizzaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pizzas and returns the data saved in the database.
     * @param {PizzaCreateManyAndReturnArgs} args - Arguments to create many Pizzas.
     * @example
     * // Create many Pizzas
     * const pizza = await prisma.pizza.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pizzas and only return the `id`
     * const pizzaWithIdOnly = await prisma.pizza.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PizzaCreateManyAndReturnArgs>(args?: SelectSubset<T, PizzaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PizzaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Pizza.
     * @param {PizzaDeleteArgs} args - Arguments to delete one Pizza.
     * @example
     * // Delete one Pizza
     * const Pizza = await prisma.pizza.delete({
     *   where: {
     *     // ... filter to delete one Pizza
     *   }
     * })
     * 
     */
    delete<T extends PizzaDeleteArgs>(args: SelectSubset<T, PizzaDeleteArgs<ExtArgs>>): Prisma__PizzaClient<$Result.GetResult<Prisma.$PizzaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Pizza.
     * @param {PizzaUpdateArgs} args - Arguments to update one Pizza.
     * @example
     * // Update one Pizza
     * const pizza = await prisma.pizza.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PizzaUpdateArgs>(args: SelectSubset<T, PizzaUpdateArgs<ExtArgs>>): Prisma__PizzaClient<$Result.GetResult<Prisma.$PizzaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Pizzas.
     * @param {PizzaDeleteManyArgs} args - Arguments to filter Pizzas to delete.
     * @example
     * // Delete a few Pizzas
     * const { count } = await prisma.pizza.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PizzaDeleteManyArgs>(args?: SelectSubset<T, PizzaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pizzas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pizzas
     * const pizza = await prisma.pizza.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PizzaUpdateManyArgs>(args: SelectSubset<T, PizzaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pizza.
     * @param {PizzaUpsertArgs} args - Arguments to update or create a Pizza.
     * @example
     * // Update or create a Pizza
     * const pizza = await prisma.pizza.upsert({
     *   create: {
     *     // ... data to create a Pizza
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pizza we want to update
     *   }
     * })
     */
    upsert<T extends PizzaUpsertArgs>(args: SelectSubset<T, PizzaUpsertArgs<ExtArgs>>): Prisma__PizzaClient<$Result.GetResult<Prisma.$PizzaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Pizzas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzaCountArgs} args - Arguments to filter Pizzas to count.
     * @example
     * // Count the number of Pizzas
     * const count = await prisma.pizza.count({
     *   where: {
     *     // ... the filter for the Pizzas we want to count
     *   }
     * })
    **/
    count<T extends PizzaCountArgs>(
      args?: Subset<T, PizzaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PizzaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pizza.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PizzaAggregateArgs>(args: Subset<T, PizzaAggregateArgs>): Prisma.PrismaPromise<GetPizzaAggregateType<T>>

    /**
     * Group by Pizza.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PizzaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PizzaGroupByArgs['orderBy'] }
        : { orderBy?: PizzaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PizzaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPizzaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pizza model
   */
  readonly fields: PizzaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pizza.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PizzaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    toppings<T extends Pizza$toppingsArgs<ExtArgs> = {}>(args?: Subset<T, Pizza$toppingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PizzaToppingsPayload<ExtArgs>, T, "findMany"> | Null>
    orders<T extends Pizza$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Pizza$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPizzasPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pizza model
   */ 
  interface PizzaFieldRefs {
    readonly id: FieldRef<"Pizza", 'Int'>
    readonly name: FieldRef<"Pizza", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Pizza findUnique
   */
  export type PizzaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizza
     */
    select?: PizzaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaInclude<ExtArgs> | null
    /**
     * Filter, which Pizza to fetch.
     */
    where: PizzaWhereUniqueInput
  }

  /**
   * Pizza findUniqueOrThrow
   */
  export type PizzaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizza
     */
    select?: PizzaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaInclude<ExtArgs> | null
    /**
     * Filter, which Pizza to fetch.
     */
    where: PizzaWhereUniqueInput
  }

  /**
   * Pizza findFirst
   */
  export type PizzaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizza
     */
    select?: PizzaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaInclude<ExtArgs> | null
    /**
     * Filter, which Pizza to fetch.
     */
    where?: PizzaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pizzas to fetch.
     */
    orderBy?: PizzaOrderByWithRelationInput | PizzaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pizzas.
     */
    cursor?: PizzaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pizzas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pizzas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pizzas.
     */
    distinct?: PizzaScalarFieldEnum | PizzaScalarFieldEnum[]
  }

  /**
   * Pizza findFirstOrThrow
   */
  export type PizzaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizza
     */
    select?: PizzaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaInclude<ExtArgs> | null
    /**
     * Filter, which Pizza to fetch.
     */
    where?: PizzaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pizzas to fetch.
     */
    orderBy?: PizzaOrderByWithRelationInput | PizzaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pizzas.
     */
    cursor?: PizzaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pizzas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pizzas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pizzas.
     */
    distinct?: PizzaScalarFieldEnum | PizzaScalarFieldEnum[]
  }

  /**
   * Pizza findMany
   */
  export type PizzaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizza
     */
    select?: PizzaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaInclude<ExtArgs> | null
    /**
     * Filter, which Pizzas to fetch.
     */
    where?: PizzaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pizzas to fetch.
     */
    orderBy?: PizzaOrderByWithRelationInput | PizzaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pizzas.
     */
    cursor?: PizzaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pizzas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pizzas.
     */
    skip?: number
    distinct?: PizzaScalarFieldEnum | PizzaScalarFieldEnum[]
  }

  /**
   * Pizza create
   */
  export type PizzaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizza
     */
    select?: PizzaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaInclude<ExtArgs> | null
    /**
     * The data needed to create a Pizza.
     */
    data: XOR<PizzaCreateInput, PizzaUncheckedCreateInput>
  }

  /**
   * Pizza createMany
   */
  export type PizzaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pizzas.
     */
    data: PizzaCreateManyInput | PizzaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pizza createManyAndReturn
   */
  export type PizzaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizza
     */
    select?: PizzaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Pizzas.
     */
    data: PizzaCreateManyInput | PizzaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pizza update
   */
  export type PizzaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizza
     */
    select?: PizzaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaInclude<ExtArgs> | null
    /**
     * The data needed to update a Pizza.
     */
    data: XOR<PizzaUpdateInput, PizzaUncheckedUpdateInput>
    /**
     * Choose, which Pizza to update.
     */
    where: PizzaWhereUniqueInput
  }

  /**
   * Pizza updateMany
   */
  export type PizzaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pizzas.
     */
    data: XOR<PizzaUpdateManyMutationInput, PizzaUncheckedUpdateManyInput>
    /**
     * Filter which Pizzas to update
     */
    where?: PizzaWhereInput
  }

  /**
   * Pizza upsert
   */
  export type PizzaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizza
     */
    select?: PizzaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaInclude<ExtArgs> | null
    /**
     * The filter to search for the Pizza to update in case it exists.
     */
    where: PizzaWhereUniqueInput
    /**
     * In case the Pizza found by the `where` argument doesn't exist, create a new Pizza with this data.
     */
    create: XOR<PizzaCreateInput, PizzaUncheckedCreateInput>
    /**
     * In case the Pizza was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PizzaUpdateInput, PizzaUncheckedUpdateInput>
  }

  /**
   * Pizza delete
   */
  export type PizzaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizza
     */
    select?: PizzaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaInclude<ExtArgs> | null
    /**
     * Filter which Pizza to delete.
     */
    where: PizzaWhereUniqueInput
  }

  /**
   * Pizza deleteMany
   */
  export type PizzaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pizzas to delete
     */
    where?: PizzaWhereInput
  }

  /**
   * Pizza.toppings
   */
  export type Pizza$toppingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzaToppings
     */
    select?: PizzaToppingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaToppingsInclude<ExtArgs> | null
    where?: PizzaToppingsWhereInput
    orderBy?: PizzaToppingsOrderByWithRelationInput | PizzaToppingsOrderByWithRelationInput[]
    cursor?: PizzaToppingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PizzaToppingsScalarFieldEnum | PizzaToppingsScalarFieldEnum[]
  }

  /**
   * Pizza.orders
   */
  export type Pizza$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPizzas
     */
    select?: OrderPizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPizzasInclude<ExtArgs> | null
    where?: OrderPizzasWhereInput
    orderBy?: OrderPizzasOrderByWithRelationInput | OrderPizzasOrderByWithRelationInput[]
    cursor?: OrderPizzasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderPizzasScalarFieldEnum | OrderPizzasScalarFieldEnum[]
  }

  /**
   * Pizza without action
   */
  export type PizzaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizza
     */
    select?: PizzaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: number
    userId: number
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    pizzas?: boolean | Order$pizzasArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    userId?: boolean
  }

  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    pizzas?: boolean | Order$pizzasArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      pizzas: Prisma.$OrderPizzasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    pizzas<T extends Order$pizzasArgs<ExtArgs> = {}>(args?: Subset<T, Order$pizzasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPizzasPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */ 
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'Int'>
    readonly userId: FieldRef<"Order", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
  }

  /**
   * Order.pizzas
   */
  export type Order$pizzasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPizzas
     */
    select?: OrderPizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPizzasInclude<ExtArgs> | null
    where?: OrderPizzasWhereInput
    orderBy?: OrderPizzasOrderByWithRelationInput | OrderPizzasOrderByWithRelationInput[]
    cursor?: OrderPizzasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderPizzasScalarFieldEnum | OrderPizzasScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model PizzaToppings
   */

  export type AggregatePizzaToppings = {
    _count: PizzaToppingsCountAggregateOutputType | null
    _avg: PizzaToppingsAvgAggregateOutputType | null
    _sum: PizzaToppingsSumAggregateOutputType | null
    _min: PizzaToppingsMinAggregateOutputType | null
    _max: PizzaToppingsMaxAggregateOutputType | null
  }

  export type PizzaToppingsAvgAggregateOutputType = {
    pizzaId: number | null
    toppingId: number | null
  }

  export type PizzaToppingsSumAggregateOutputType = {
    pizzaId: number | null
    toppingId: number | null
  }

  export type PizzaToppingsMinAggregateOutputType = {
    pizzaId: number | null
    toppingId: number | null
  }

  export type PizzaToppingsMaxAggregateOutputType = {
    pizzaId: number | null
    toppingId: number | null
  }

  export type PizzaToppingsCountAggregateOutputType = {
    pizzaId: number
    toppingId: number
    _all: number
  }


  export type PizzaToppingsAvgAggregateInputType = {
    pizzaId?: true
    toppingId?: true
  }

  export type PizzaToppingsSumAggregateInputType = {
    pizzaId?: true
    toppingId?: true
  }

  export type PizzaToppingsMinAggregateInputType = {
    pizzaId?: true
    toppingId?: true
  }

  export type PizzaToppingsMaxAggregateInputType = {
    pizzaId?: true
    toppingId?: true
  }

  export type PizzaToppingsCountAggregateInputType = {
    pizzaId?: true
    toppingId?: true
    _all?: true
  }

  export type PizzaToppingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PizzaToppings to aggregate.
     */
    where?: PizzaToppingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PizzaToppings to fetch.
     */
    orderBy?: PizzaToppingsOrderByWithRelationInput | PizzaToppingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PizzaToppingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PizzaToppings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PizzaToppings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PizzaToppings
    **/
    _count?: true | PizzaToppingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PizzaToppingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PizzaToppingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PizzaToppingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PizzaToppingsMaxAggregateInputType
  }

  export type GetPizzaToppingsAggregateType<T extends PizzaToppingsAggregateArgs> = {
        [P in keyof T & keyof AggregatePizzaToppings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePizzaToppings[P]>
      : GetScalarType<T[P], AggregatePizzaToppings[P]>
  }




  export type PizzaToppingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PizzaToppingsWhereInput
    orderBy?: PizzaToppingsOrderByWithAggregationInput | PizzaToppingsOrderByWithAggregationInput[]
    by: PizzaToppingsScalarFieldEnum[] | PizzaToppingsScalarFieldEnum
    having?: PizzaToppingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PizzaToppingsCountAggregateInputType | true
    _avg?: PizzaToppingsAvgAggregateInputType
    _sum?: PizzaToppingsSumAggregateInputType
    _min?: PizzaToppingsMinAggregateInputType
    _max?: PizzaToppingsMaxAggregateInputType
  }

  export type PizzaToppingsGroupByOutputType = {
    pizzaId: number
    toppingId: number
    _count: PizzaToppingsCountAggregateOutputType | null
    _avg: PizzaToppingsAvgAggregateOutputType | null
    _sum: PizzaToppingsSumAggregateOutputType | null
    _min: PizzaToppingsMinAggregateOutputType | null
    _max: PizzaToppingsMaxAggregateOutputType | null
  }

  type GetPizzaToppingsGroupByPayload<T extends PizzaToppingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PizzaToppingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PizzaToppingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PizzaToppingsGroupByOutputType[P]>
            : GetScalarType<T[P], PizzaToppingsGroupByOutputType[P]>
        }
      >
    >


  export type PizzaToppingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pizzaId?: boolean
    toppingId?: boolean
    pizza?: boolean | PizzaDefaultArgs<ExtArgs>
    topping?: boolean | ToppingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pizzaToppings"]>

  export type PizzaToppingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pizzaId?: boolean
    toppingId?: boolean
    pizza?: boolean | PizzaDefaultArgs<ExtArgs>
    topping?: boolean | ToppingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pizzaToppings"]>

  export type PizzaToppingsSelectScalar = {
    pizzaId?: boolean
    toppingId?: boolean
  }

  export type PizzaToppingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pizza?: boolean | PizzaDefaultArgs<ExtArgs>
    topping?: boolean | ToppingDefaultArgs<ExtArgs>
  }
  export type PizzaToppingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pizza?: boolean | PizzaDefaultArgs<ExtArgs>
    topping?: boolean | ToppingDefaultArgs<ExtArgs>
  }

  export type $PizzaToppingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PizzaToppings"
    objects: {
      pizza: Prisma.$PizzaPayload<ExtArgs>
      topping: Prisma.$ToppingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      pizzaId: number
      toppingId: number
    }, ExtArgs["result"]["pizzaToppings"]>
    composites: {}
  }

  type PizzaToppingsGetPayload<S extends boolean | null | undefined | PizzaToppingsDefaultArgs> = $Result.GetResult<Prisma.$PizzaToppingsPayload, S>

  type PizzaToppingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PizzaToppingsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PizzaToppingsCountAggregateInputType | true
    }

  export interface PizzaToppingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PizzaToppings'], meta: { name: 'PizzaToppings' } }
    /**
     * Find zero or one PizzaToppings that matches the filter.
     * @param {PizzaToppingsFindUniqueArgs} args - Arguments to find a PizzaToppings
     * @example
     * // Get one PizzaToppings
     * const pizzaToppings = await prisma.pizzaToppings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PizzaToppingsFindUniqueArgs>(args: SelectSubset<T, PizzaToppingsFindUniqueArgs<ExtArgs>>): Prisma__PizzaToppingsClient<$Result.GetResult<Prisma.$PizzaToppingsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PizzaToppings that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PizzaToppingsFindUniqueOrThrowArgs} args - Arguments to find a PizzaToppings
     * @example
     * // Get one PizzaToppings
     * const pizzaToppings = await prisma.pizzaToppings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PizzaToppingsFindUniqueOrThrowArgs>(args: SelectSubset<T, PizzaToppingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PizzaToppingsClient<$Result.GetResult<Prisma.$PizzaToppingsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PizzaToppings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzaToppingsFindFirstArgs} args - Arguments to find a PizzaToppings
     * @example
     * // Get one PizzaToppings
     * const pizzaToppings = await prisma.pizzaToppings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PizzaToppingsFindFirstArgs>(args?: SelectSubset<T, PizzaToppingsFindFirstArgs<ExtArgs>>): Prisma__PizzaToppingsClient<$Result.GetResult<Prisma.$PizzaToppingsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PizzaToppings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzaToppingsFindFirstOrThrowArgs} args - Arguments to find a PizzaToppings
     * @example
     * // Get one PizzaToppings
     * const pizzaToppings = await prisma.pizzaToppings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PizzaToppingsFindFirstOrThrowArgs>(args?: SelectSubset<T, PizzaToppingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PizzaToppingsClient<$Result.GetResult<Prisma.$PizzaToppingsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PizzaToppings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzaToppingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PizzaToppings
     * const pizzaToppings = await prisma.pizzaToppings.findMany()
     * 
     * // Get first 10 PizzaToppings
     * const pizzaToppings = await prisma.pizzaToppings.findMany({ take: 10 })
     * 
     * // Only select the `pizzaId`
     * const pizzaToppingsWithPizzaIdOnly = await prisma.pizzaToppings.findMany({ select: { pizzaId: true } })
     * 
     */
    findMany<T extends PizzaToppingsFindManyArgs>(args?: SelectSubset<T, PizzaToppingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PizzaToppingsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PizzaToppings.
     * @param {PizzaToppingsCreateArgs} args - Arguments to create a PizzaToppings.
     * @example
     * // Create one PizzaToppings
     * const PizzaToppings = await prisma.pizzaToppings.create({
     *   data: {
     *     // ... data to create a PizzaToppings
     *   }
     * })
     * 
     */
    create<T extends PizzaToppingsCreateArgs>(args: SelectSubset<T, PizzaToppingsCreateArgs<ExtArgs>>): Prisma__PizzaToppingsClient<$Result.GetResult<Prisma.$PizzaToppingsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PizzaToppings.
     * @param {PizzaToppingsCreateManyArgs} args - Arguments to create many PizzaToppings.
     * @example
     * // Create many PizzaToppings
     * const pizzaToppings = await prisma.pizzaToppings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PizzaToppingsCreateManyArgs>(args?: SelectSubset<T, PizzaToppingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PizzaToppings and returns the data saved in the database.
     * @param {PizzaToppingsCreateManyAndReturnArgs} args - Arguments to create many PizzaToppings.
     * @example
     * // Create many PizzaToppings
     * const pizzaToppings = await prisma.pizzaToppings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PizzaToppings and only return the `pizzaId`
     * const pizzaToppingsWithPizzaIdOnly = await prisma.pizzaToppings.createManyAndReturn({ 
     *   select: { pizzaId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PizzaToppingsCreateManyAndReturnArgs>(args?: SelectSubset<T, PizzaToppingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PizzaToppingsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PizzaToppings.
     * @param {PizzaToppingsDeleteArgs} args - Arguments to delete one PizzaToppings.
     * @example
     * // Delete one PizzaToppings
     * const PizzaToppings = await prisma.pizzaToppings.delete({
     *   where: {
     *     // ... filter to delete one PizzaToppings
     *   }
     * })
     * 
     */
    delete<T extends PizzaToppingsDeleteArgs>(args: SelectSubset<T, PizzaToppingsDeleteArgs<ExtArgs>>): Prisma__PizzaToppingsClient<$Result.GetResult<Prisma.$PizzaToppingsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PizzaToppings.
     * @param {PizzaToppingsUpdateArgs} args - Arguments to update one PizzaToppings.
     * @example
     * // Update one PizzaToppings
     * const pizzaToppings = await prisma.pizzaToppings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PizzaToppingsUpdateArgs>(args: SelectSubset<T, PizzaToppingsUpdateArgs<ExtArgs>>): Prisma__PizzaToppingsClient<$Result.GetResult<Prisma.$PizzaToppingsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PizzaToppings.
     * @param {PizzaToppingsDeleteManyArgs} args - Arguments to filter PizzaToppings to delete.
     * @example
     * // Delete a few PizzaToppings
     * const { count } = await prisma.pizzaToppings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PizzaToppingsDeleteManyArgs>(args?: SelectSubset<T, PizzaToppingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PizzaToppings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzaToppingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PizzaToppings
     * const pizzaToppings = await prisma.pizzaToppings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PizzaToppingsUpdateManyArgs>(args: SelectSubset<T, PizzaToppingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PizzaToppings.
     * @param {PizzaToppingsUpsertArgs} args - Arguments to update or create a PizzaToppings.
     * @example
     * // Update or create a PizzaToppings
     * const pizzaToppings = await prisma.pizzaToppings.upsert({
     *   create: {
     *     // ... data to create a PizzaToppings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PizzaToppings we want to update
     *   }
     * })
     */
    upsert<T extends PizzaToppingsUpsertArgs>(args: SelectSubset<T, PizzaToppingsUpsertArgs<ExtArgs>>): Prisma__PizzaToppingsClient<$Result.GetResult<Prisma.$PizzaToppingsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PizzaToppings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzaToppingsCountArgs} args - Arguments to filter PizzaToppings to count.
     * @example
     * // Count the number of PizzaToppings
     * const count = await prisma.pizzaToppings.count({
     *   where: {
     *     // ... the filter for the PizzaToppings we want to count
     *   }
     * })
    **/
    count<T extends PizzaToppingsCountArgs>(
      args?: Subset<T, PizzaToppingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PizzaToppingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PizzaToppings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzaToppingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PizzaToppingsAggregateArgs>(args: Subset<T, PizzaToppingsAggregateArgs>): Prisma.PrismaPromise<GetPizzaToppingsAggregateType<T>>

    /**
     * Group by PizzaToppings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzaToppingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PizzaToppingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PizzaToppingsGroupByArgs['orderBy'] }
        : { orderBy?: PizzaToppingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PizzaToppingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPizzaToppingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PizzaToppings model
   */
  readonly fields: PizzaToppingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PizzaToppings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PizzaToppingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pizza<T extends PizzaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PizzaDefaultArgs<ExtArgs>>): Prisma__PizzaClient<$Result.GetResult<Prisma.$PizzaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    topping<T extends ToppingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ToppingDefaultArgs<ExtArgs>>): Prisma__ToppingClient<$Result.GetResult<Prisma.$ToppingPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PizzaToppings model
   */ 
  interface PizzaToppingsFieldRefs {
    readonly pizzaId: FieldRef<"PizzaToppings", 'Int'>
    readonly toppingId: FieldRef<"PizzaToppings", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PizzaToppings findUnique
   */
  export type PizzaToppingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzaToppings
     */
    select?: PizzaToppingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaToppingsInclude<ExtArgs> | null
    /**
     * Filter, which PizzaToppings to fetch.
     */
    where: PizzaToppingsWhereUniqueInput
  }

  /**
   * PizzaToppings findUniqueOrThrow
   */
  export type PizzaToppingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzaToppings
     */
    select?: PizzaToppingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaToppingsInclude<ExtArgs> | null
    /**
     * Filter, which PizzaToppings to fetch.
     */
    where: PizzaToppingsWhereUniqueInput
  }

  /**
   * PizzaToppings findFirst
   */
  export type PizzaToppingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzaToppings
     */
    select?: PizzaToppingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaToppingsInclude<ExtArgs> | null
    /**
     * Filter, which PizzaToppings to fetch.
     */
    where?: PizzaToppingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PizzaToppings to fetch.
     */
    orderBy?: PizzaToppingsOrderByWithRelationInput | PizzaToppingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PizzaToppings.
     */
    cursor?: PizzaToppingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PizzaToppings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PizzaToppings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PizzaToppings.
     */
    distinct?: PizzaToppingsScalarFieldEnum | PizzaToppingsScalarFieldEnum[]
  }

  /**
   * PizzaToppings findFirstOrThrow
   */
  export type PizzaToppingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzaToppings
     */
    select?: PizzaToppingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaToppingsInclude<ExtArgs> | null
    /**
     * Filter, which PizzaToppings to fetch.
     */
    where?: PizzaToppingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PizzaToppings to fetch.
     */
    orderBy?: PizzaToppingsOrderByWithRelationInput | PizzaToppingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PizzaToppings.
     */
    cursor?: PizzaToppingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PizzaToppings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PizzaToppings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PizzaToppings.
     */
    distinct?: PizzaToppingsScalarFieldEnum | PizzaToppingsScalarFieldEnum[]
  }

  /**
   * PizzaToppings findMany
   */
  export type PizzaToppingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzaToppings
     */
    select?: PizzaToppingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaToppingsInclude<ExtArgs> | null
    /**
     * Filter, which PizzaToppings to fetch.
     */
    where?: PizzaToppingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PizzaToppings to fetch.
     */
    orderBy?: PizzaToppingsOrderByWithRelationInput | PizzaToppingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PizzaToppings.
     */
    cursor?: PizzaToppingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PizzaToppings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PizzaToppings.
     */
    skip?: number
    distinct?: PizzaToppingsScalarFieldEnum | PizzaToppingsScalarFieldEnum[]
  }

  /**
   * PizzaToppings create
   */
  export type PizzaToppingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzaToppings
     */
    select?: PizzaToppingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaToppingsInclude<ExtArgs> | null
    /**
     * The data needed to create a PizzaToppings.
     */
    data: XOR<PizzaToppingsCreateInput, PizzaToppingsUncheckedCreateInput>
  }

  /**
   * PizzaToppings createMany
   */
  export type PizzaToppingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PizzaToppings.
     */
    data: PizzaToppingsCreateManyInput | PizzaToppingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PizzaToppings createManyAndReturn
   */
  export type PizzaToppingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzaToppings
     */
    select?: PizzaToppingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PizzaToppings.
     */
    data: PizzaToppingsCreateManyInput | PizzaToppingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaToppingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PizzaToppings update
   */
  export type PizzaToppingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzaToppings
     */
    select?: PizzaToppingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaToppingsInclude<ExtArgs> | null
    /**
     * The data needed to update a PizzaToppings.
     */
    data: XOR<PizzaToppingsUpdateInput, PizzaToppingsUncheckedUpdateInput>
    /**
     * Choose, which PizzaToppings to update.
     */
    where: PizzaToppingsWhereUniqueInput
  }

  /**
   * PizzaToppings updateMany
   */
  export type PizzaToppingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PizzaToppings.
     */
    data: XOR<PizzaToppingsUpdateManyMutationInput, PizzaToppingsUncheckedUpdateManyInput>
    /**
     * Filter which PizzaToppings to update
     */
    where?: PizzaToppingsWhereInput
  }

  /**
   * PizzaToppings upsert
   */
  export type PizzaToppingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzaToppings
     */
    select?: PizzaToppingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaToppingsInclude<ExtArgs> | null
    /**
     * The filter to search for the PizzaToppings to update in case it exists.
     */
    where: PizzaToppingsWhereUniqueInput
    /**
     * In case the PizzaToppings found by the `where` argument doesn't exist, create a new PizzaToppings with this data.
     */
    create: XOR<PizzaToppingsCreateInput, PizzaToppingsUncheckedCreateInput>
    /**
     * In case the PizzaToppings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PizzaToppingsUpdateInput, PizzaToppingsUncheckedUpdateInput>
  }

  /**
   * PizzaToppings delete
   */
  export type PizzaToppingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzaToppings
     */
    select?: PizzaToppingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaToppingsInclude<ExtArgs> | null
    /**
     * Filter which PizzaToppings to delete.
     */
    where: PizzaToppingsWhereUniqueInput
  }

  /**
   * PizzaToppings deleteMany
   */
  export type PizzaToppingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PizzaToppings to delete
     */
    where?: PizzaToppingsWhereInput
  }

  /**
   * PizzaToppings without action
   */
  export type PizzaToppingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzaToppings
     */
    select?: PizzaToppingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PizzaToppingsInclude<ExtArgs> | null
  }


  /**
   * Model OrderPizzas
   */

  export type AggregateOrderPizzas = {
    _count: OrderPizzasCountAggregateOutputType | null
    _avg: OrderPizzasAvgAggregateOutputType | null
    _sum: OrderPizzasSumAggregateOutputType | null
    _min: OrderPizzasMinAggregateOutputType | null
    _max: OrderPizzasMaxAggregateOutputType | null
  }

  export type OrderPizzasAvgAggregateOutputType = {
    orderId: number | null
    pizzaId: number | null
  }

  export type OrderPizzasSumAggregateOutputType = {
    orderId: number | null
    pizzaId: number | null
  }

  export type OrderPizzasMinAggregateOutputType = {
    orderId: number | null
    pizzaId: number | null
  }

  export type OrderPizzasMaxAggregateOutputType = {
    orderId: number | null
    pizzaId: number | null
  }

  export type OrderPizzasCountAggregateOutputType = {
    orderId: number
    pizzaId: number
    _all: number
  }


  export type OrderPizzasAvgAggregateInputType = {
    orderId?: true
    pizzaId?: true
  }

  export type OrderPizzasSumAggregateInputType = {
    orderId?: true
    pizzaId?: true
  }

  export type OrderPizzasMinAggregateInputType = {
    orderId?: true
    pizzaId?: true
  }

  export type OrderPizzasMaxAggregateInputType = {
    orderId?: true
    pizzaId?: true
  }

  export type OrderPizzasCountAggregateInputType = {
    orderId?: true
    pizzaId?: true
    _all?: true
  }

  export type OrderPizzasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderPizzas to aggregate.
     */
    where?: OrderPizzasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderPizzas to fetch.
     */
    orderBy?: OrderPizzasOrderByWithRelationInput | OrderPizzasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderPizzasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderPizzas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderPizzas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderPizzas
    **/
    _count?: true | OrderPizzasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderPizzasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderPizzasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderPizzasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderPizzasMaxAggregateInputType
  }

  export type GetOrderPizzasAggregateType<T extends OrderPizzasAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderPizzas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderPizzas[P]>
      : GetScalarType<T[P], AggregateOrderPizzas[P]>
  }




  export type OrderPizzasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderPizzasWhereInput
    orderBy?: OrderPizzasOrderByWithAggregationInput | OrderPizzasOrderByWithAggregationInput[]
    by: OrderPizzasScalarFieldEnum[] | OrderPizzasScalarFieldEnum
    having?: OrderPizzasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderPizzasCountAggregateInputType | true
    _avg?: OrderPizzasAvgAggregateInputType
    _sum?: OrderPizzasSumAggregateInputType
    _min?: OrderPizzasMinAggregateInputType
    _max?: OrderPizzasMaxAggregateInputType
  }

  export type OrderPizzasGroupByOutputType = {
    orderId: number
    pizzaId: number
    _count: OrderPizzasCountAggregateOutputType | null
    _avg: OrderPizzasAvgAggregateOutputType | null
    _sum: OrderPizzasSumAggregateOutputType | null
    _min: OrderPizzasMinAggregateOutputType | null
    _max: OrderPizzasMaxAggregateOutputType | null
  }

  type GetOrderPizzasGroupByPayload<T extends OrderPizzasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderPizzasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderPizzasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderPizzasGroupByOutputType[P]>
            : GetScalarType<T[P], OrderPizzasGroupByOutputType[P]>
        }
      >
    >


  export type OrderPizzasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    orderId?: boolean
    pizzaId?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    pizza?: boolean | PizzaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderPizzas"]>

  export type OrderPizzasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    orderId?: boolean
    pizzaId?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    pizza?: boolean | PizzaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderPizzas"]>

  export type OrderPizzasSelectScalar = {
    orderId?: boolean
    pizzaId?: boolean
  }

  export type OrderPizzasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    pizza?: boolean | PizzaDefaultArgs<ExtArgs>
  }
  export type OrderPizzasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    pizza?: boolean | PizzaDefaultArgs<ExtArgs>
  }

  export type $OrderPizzasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderPizzas"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      pizza: Prisma.$PizzaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      orderId: number
      pizzaId: number
    }, ExtArgs["result"]["orderPizzas"]>
    composites: {}
  }

  type OrderPizzasGetPayload<S extends boolean | null | undefined | OrderPizzasDefaultArgs> = $Result.GetResult<Prisma.$OrderPizzasPayload, S>

  type OrderPizzasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderPizzasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderPizzasCountAggregateInputType | true
    }

  export interface OrderPizzasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderPizzas'], meta: { name: 'OrderPizzas' } }
    /**
     * Find zero or one OrderPizzas that matches the filter.
     * @param {OrderPizzasFindUniqueArgs} args - Arguments to find a OrderPizzas
     * @example
     * // Get one OrderPizzas
     * const orderPizzas = await prisma.orderPizzas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderPizzasFindUniqueArgs>(args: SelectSubset<T, OrderPizzasFindUniqueArgs<ExtArgs>>): Prisma__OrderPizzasClient<$Result.GetResult<Prisma.$OrderPizzasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OrderPizzas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrderPizzasFindUniqueOrThrowArgs} args - Arguments to find a OrderPizzas
     * @example
     * // Get one OrderPizzas
     * const orderPizzas = await prisma.orderPizzas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderPizzasFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderPizzasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderPizzasClient<$Result.GetResult<Prisma.$OrderPizzasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OrderPizzas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPizzasFindFirstArgs} args - Arguments to find a OrderPizzas
     * @example
     * // Get one OrderPizzas
     * const orderPizzas = await prisma.orderPizzas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderPizzasFindFirstArgs>(args?: SelectSubset<T, OrderPizzasFindFirstArgs<ExtArgs>>): Prisma__OrderPizzasClient<$Result.GetResult<Prisma.$OrderPizzasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OrderPizzas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPizzasFindFirstOrThrowArgs} args - Arguments to find a OrderPizzas
     * @example
     * // Get one OrderPizzas
     * const orderPizzas = await prisma.orderPizzas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderPizzasFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderPizzasFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderPizzasClient<$Result.GetResult<Prisma.$OrderPizzasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OrderPizzas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPizzasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderPizzas
     * const orderPizzas = await prisma.orderPizzas.findMany()
     * 
     * // Get first 10 OrderPizzas
     * const orderPizzas = await prisma.orderPizzas.findMany({ take: 10 })
     * 
     * // Only select the `orderId`
     * const orderPizzasWithOrderIdOnly = await prisma.orderPizzas.findMany({ select: { orderId: true } })
     * 
     */
    findMany<T extends OrderPizzasFindManyArgs>(args?: SelectSubset<T, OrderPizzasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPizzasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OrderPizzas.
     * @param {OrderPizzasCreateArgs} args - Arguments to create a OrderPizzas.
     * @example
     * // Create one OrderPizzas
     * const OrderPizzas = await prisma.orderPizzas.create({
     *   data: {
     *     // ... data to create a OrderPizzas
     *   }
     * })
     * 
     */
    create<T extends OrderPizzasCreateArgs>(args: SelectSubset<T, OrderPizzasCreateArgs<ExtArgs>>): Prisma__OrderPizzasClient<$Result.GetResult<Prisma.$OrderPizzasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OrderPizzas.
     * @param {OrderPizzasCreateManyArgs} args - Arguments to create many OrderPizzas.
     * @example
     * // Create many OrderPizzas
     * const orderPizzas = await prisma.orderPizzas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderPizzasCreateManyArgs>(args?: SelectSubset<T, OrderPizzasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderPizzas and returns the data saved in the database.
     * @param {OrderPizzasCreateManyAndReturnArgs} args - Arguments to create many OrderPizzas.
     * @example
     * // Create many OrderPizzas
     * const orderPizzas = await prisma.orderPizzas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderPizzas and only return the `orderId`
     * const orderPizzasWithOrderIdOnly = await prisma.orderPizzas.createManyAndReturn({ 
     *   select: { orderId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderPizzasCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderPizzasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPizzasPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OrderPizzas.
     * @param {OrderPizzasDeleteArgs} args - Arguments to delete one OrderPizzas.
     * @example
     * // Delete one OrderPizzas
     * const OrderPizzas = await prisma.orderPizzas.delete({
     *   where: {
     *     // ... filter to delete one OrderPizzas
     *   }
     * })
     * 
     */
    delete<T extends OrderPizzasDeleteArgs>(args: SelectSubset<T, OrderPizzasDeleteArgs<ExtArgs>>): Prisma__OrderPizzasClient<$Result.GetResult<Prisma.$OrderPizzasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OrderPizzas.
     * @param {OrderPizzasUpdateArgs} args - Arguments to update one OrderPizzas.
     * @example
     * // Update one OrderPizzas
     * const orderPizzas = await prisma.orderPizzas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderPizzasUpdateArgs>(args: SelectSubset<T, OrderPizzasUpdateArgs<ExtArgs>>): Prisma__OrderPizzasClient<$Result.GetResult<Prisma.$OrderPizzasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OrderPizzas.
     * @param {OrderPizzasDeleteManyArgs} args - Arguments to filter OrderPizzas to delete.
     * @example
     * // Delete a few OrderPizzas
     * const { count } = await prisma.orderPizzas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderPizzasDeleteManyArgs>(args?: SelectSubset<T, OrderPizzasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderPizzas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPizzasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderPizzas
     * const orderPizzas = await prisma.orderPizzas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderPizzasUpdateManyArgs>(args: SelectSubset<T, OrderPizzasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderPizzas.
     * @param {OrderPizzasUpsertArgs} args - Arguments to update or create a OrderPizzas.
     * @example
     * // Update or create a OrderPizzas
     * const orderPizzas = await prisma.orderPizzas.upsert({
     *   create: {
     *     // ... data to create a OrderPizzas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderPizzas we want to update
     *   }
     * })
     */
    upsert<T extends OrderPizzasUpsertArgs>(args: SelectSubset<T, OrderPizzasUpsertArgs<ExtArgs>>): Prisma__OrderPizzasClient<$Result.GetResult<Prisma.$OrderPizzasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OrderPizzas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPizzasCountArgs} args - Arguments to filter OrderPizzas to count.
     * @example
     * // Count the number of OrderPizzas
     * const count = await prisma.orderPizzas.count({
     *   where: {
     *     // ... the filter for the OrderPizzas we want to count
     *   }
     * })
    **/
    count<T extends OrderPizzasCountArgs>(
      args?: Subset<T, OrderPizzasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderPizzasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderPizzas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPizzasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderPizzasAggregateArgs>(args: Subset<T, OrderPizzasAggregateArgs>): Prisma.PrismaPromise<GetOrderPizzasAggregateType<T>>

    /**
     * Group by OrderPizzas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderPizzasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderPizzasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderPizzasGroupByArgs['orderBy'] }
        : { orderBy?: OrderPizzasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderPizzasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderPizzasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderPizzas model
   */
  readonly fields: OrderPizzasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderPizzas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderPizzasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    pizza<T extends PizzaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PizzaDefaultArgs<ExtArgs>>): Prisma__PizzaClient<$Result.GetResult<Prisma.$PizzaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderPizzas model
   */ 
  interface OrderPizzasFieldRefs {
    readonly orderId: FieldRef<"OrderPizzas", 'Int'>
    readonly pizzaId: FieldRef<"OrderPizzas", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * OrderPizzas findUnique
   */
  export type OrderPizzasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPizzas
     */
    select?: OrderPizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPizzasInclude<ExtArgs> | null
    /**
     * Filter, which OrderPizzas to fetch.
     */
    where: OrderPizzasWhereUniqueInput
  }

  /**
   * OrderPizzas findUniqueOrThrow
   */
  export type OrderPizzasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPizzas
     */
    select?: OrderPizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPizzasInclude<ExtArgs> | null
    /**
     * Filter, which OrderPizzas to fetch.
     */
    where: OrderPizzasWhereUniqueInput
  }

  /**
   * OrderPizzas findFirst
   */
  export type OrderPizzasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPizzas
     */
    select?: OrderPizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPizzasInclude<ExtArgs> | null
    /**
     * Filter, which OrderPizzas to fetch.
     */
    where?: OrderPizzasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderPizzas to fetch.
     */
    orderBy?: OrderPizzasOrderByWithRelationInput | OrderPizzasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderPizzas.
     */
    cursor?: OrderPizzasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderPizzas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderPizzas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderPizzas.
     */
    distinct?: OrderPizzasScalarFieldEnum | OrderPizzasScalarFieldEnum[]
  }

  /**
   * OrderPizzas findFirstOrThrow
   */
  export type OrderPizzasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPizzas
     */
    select?: OrderPizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPizzasInclude<ExtArgs> | null
    /**
     * Filter, which OrderPizzas to fetch.
     */
    where?: OrderPizzasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderPizzas to fetch.
     */
    orderBy?: OrderPizzasOrderByWithRelationInput | OrderPizzasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderPizzas.
     */
    cursor?: OrderPizzasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderPizzas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderPizzas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderPizzas.
     */
    distinct?: OrderPizzasScalarFieldEnum | OrderPizzasScalarFieldEnum[]
  }

  /**
   * OrderPizzas findMany
   */
  export type OrderPizzasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPizzas
     */
    select?: OrderPizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPizzasInclude<ExtArgs> | null
    /**
     * Filter, which OrderPizzas to fetch.
     */
    where?: OrderPizzasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderPizzas to fetch.
     */
    orderBy?: OrderPizzasOrderByWithRelationInput | OrderPizzasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderPizzas.
     */
    cursor?: OrderPizzasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderPizzas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderPizzas.
     */
    skip?: number
    distinct?: OrderPizzasScalarFieldEnum | OrderPizzasScalarFieldEnum[]
  }

  /**
   * OrderPizzas create
   */
  export type OrderPizzasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPizzas
     */
    select?: OrderPizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPizzasInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderPizzas.
     */
    data: XOR<OrderPizzasCreateInput, OrderPizzasUncheckedCreateInput>
  }

  /**
   * OrderPizzas createMany
   */
  export type OrderPizzasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderPizzas.
     */
    data: OrderPizzasCreateManyInput | OrderPizzasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderPizzas createManyAndReturn
   */
  export type OrderPizzasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPizzas
     */
    select?: OrderPizzasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OrderPizzas.
     */
    data: OrderPizzasCreateManyInput | OrderPizzasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPizzasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderPizzas update
   */
  export type OrderPizzasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPizzas
     */
    select?: OrderPizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPizzasInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderPizzas.
     */
    data: XOR<OrderPizzasUpdateInput, OrderPizzasUncheckedUpdateInput>
    /**
     * Choose, which OrderPizzas to update.
     */
    where: OrderPizzasWhereUniqueInput
  }

  /**
   * OrderPizzas updateMany
   */
  export type OrderPizzasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderPizzas.
     */
    data: XOR<OrderPizzasUpdateManyMutationInput, OrderPizzasUncheckedUpdateManyInput>
    /**
     * Filter which OrderPizzas to update
     */
    where?: OrderPizzasWhereInput
  }

  /**
   * OrderPizzas upsert
   */
  export type OrderPizzasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPizzas
     */
    select?: OrderPizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPizzasInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderPizzas to update in case it exists.
     */
    where: OrderPizzasWhereUniqueInput
    /**
     * In case the OrderPizzas found by the `where` argument doesn't exist, create a new OrderPizzas with this data.
     */
    create: XOR<OrderPizzasCreateInput, OrderPizzasUncheckedCreateInput>
    /**
     * In case the OrderPizzas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderPizzasUpdateInput, OrderPizzasUncheckedUpdateInput>
  }

  /**
   * OrderPizzas delete
   */
  export type OrderPizzasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPizzas
     */
    select?: OrderPizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPizzasInclude<ExtArgs> | null
    /**
     * Filter which OrderPizzas to delete.
     */
    where: OrderPizzasWhereUniqueInput
  }

  /**
   * OrderPizzas deleteMany
   */
  export type OrderPizzasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderPizzas to delete
     */
    where?: OrderPizzasWhereInput
  }

  /**
   * OrderPizzas without action
   */
  export type OrderPizzasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderPizzas
     */
    select?: OrderPizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderPizzasInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    invited: 'invited'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ToppingScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ToppingScalarFieldEnum = (typeof ToppingScalarFieldEnum)[keyof typeof ToppingScalarFieldEnum]


  export const PizzaScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type PizzaScalarFieldEnum = (typeof PizzaScalarFieldEnum)[keyof typeof PizzaScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const PizzaToppingsScalarFieldEnum: {
    pizzaId: 'pizzaId',
    toppingId: 'toppingId'
  };

  export type PizzaToppingsScalarFieldEnum = (typeof PizzaToppingsScalarFieldEnum)[keyof typeof PizzaToppingsScalarFieldEnum]


  export const OrderPizzasScalarFieldEnum: {
    orderId: 'orderId',
    pizzaId: 'pizzaId'
  };

  export type OrderPizzasScalarFieldEnum = (typeof OrderPizzasScalarFieldEnum)[keyof typeof OrderPizzasScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    invited?: BoolFilter<"User"> | boolean
    orders?: OrderListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    invited?: SortOrder
    orders?: OrderOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    invited?: BoolFilter<"User"> | boolean
    orders?: OrderListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    invited?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    invited?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type ToppingWhereInput = {
    AND?: ToppingWhereInput | ToppingWhereInput[]
    OR?: ToppingWhereInput[]
    NOT?: ToppingWhereInput | ToppingWhereInput[]
    id?: IntFilter<"Topping"> | number
    name?: StringFilter<"Topping"> | string
    pizzas?: PizzaToppingsListRelationFilter
  }

  export type ToppingOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    pizzas?: PizzaToppingsOrderByRelationAggregateInput
  }

  export type ToppingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ToppingWhereInput | ToppingWhereInput[]
    OR?: ToppingWhereInput[]
    NOT?: ToppingWhereInput | ToppingWhereInput[]
    name?: StringFilter<"Topping"> | string
    pizzas?: PizzaToppingsListRelationFilter
  }, "id">

  export type ToppingOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ToppingCountOrderByAggregateInput
    _avg?: ToppingAvgOrderByAggregateInput
    _max?: ToppingMaxOrderByAggregateInput
    _min?: ToppingMinOrderByAggregateInput
    _sum?: ToppingSumOrderByAggregateInput
  }

  export type ToppingScalarWhereWithAggregatesInput = {
    AND?: ToppingScalarWhereWithAggregatesInput | ToppingScalarWhereWithAggregatesInput[]
    OR?: ToppingScalarWhereWithAggregatesInput[]
    NOT?: ToppingScalarWhereWithAggregatesInput | ToppingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Topping"> | number
    name?: StringWithAggregatesFilter<"Topping"> | string
  }

  export type PizzaWhereInput = {
    AND?: PizzaWhereInput | PizzaWhereInput[]
    OR?: PizzaWhereInput[]
    NOT?: PizzaWhereInput | PizzaWhereInput[]
    id?: IntFilter<"Pizza"> | number
    name?: StringFilter<"Pizza"> | string
    toppings?: PizzaToppingsListRelationFilter
    orders?: OrderPizzasListRelationFilter
  }

  export type PizzaOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    toppings?: PizzaToppingsOrderByRelationAggregateInput
    orders?: OrderPizzasOrderByRelationAggregateInput
  }

  export type PizzaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PizzaWhereInput | PizzaWhereInput[]
    OR?: PizzaWhereInput[]
    NOT?: PizzaWhereInput | PizzaWhereInput[]
    name?: StringFilter<"Pizza"> | string
    toppings?: PizzaToppingsListRelationFilter
    orders?: OrderPizzasListRelationFilter
  }, "id">

  export type PizzaOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: PizzaCountOrderByAggregateInput
    _avg?: PizzaAvgOrderByAggregateInput
    _max?: PizzaMaxOrderByAggregateInput
    _min?: PizzaMinOrderByAggregateInput
    _sum?: PizzaSumOrderByAggregateInput
  }

  export type PizzaScalarWhereWithAggregatesInput = {
    AND?: PizzaScalarWhereWithAggregatesInput | PizzaScalarWhereWithAggregatesInput[]
    OR?: PizzaScalarWhereWithAggregatesInput[]
    NOT?: PizzaScalarWhereWithAggregatesInput | PizzaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pizza"> | number
    name?: StringWithAggregatesFilter<"Pizza"> | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: IntFilter<"Order"> | number
    userId?: IntFilter<"Order"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    pizzas?: OrderPizzasListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    pizzas?: OrderPizzasOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    userId?: IntFilter<"Order"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    pizzas?: OrderPizzasListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Order"> | number
    userId?: IntWithAggregatesFilter<"Order"> | number
  }

  export type PizzaToppingsWhereInput = {
    AND?: PizzaToppingsWhereInput | PizzaToppingsWhereInput[]
    OR?: PizzaToppingsWhereInput[]
    NOT?: PizzaToppingsWhereInput | PizzaToppingsWhereInput[]
    pizzaId?: IntFilter<"PizzaToppings"> | number
    toppingId?: IntFilter<"PizzaToppings"> | number
    pizza?: XOR<PizzaRelationFilter, PizzaWhereInput>
    topping?: XOR<ToppingRelationFilter, ToppingWhereInput>
  }

  export type PizzaToppingsOrderByWithRelationInput = {
    pizzaId?: SortOrder
    toppingId?: SortOrder
    pizza?: PizzaOrderByWithRelationInput
    topping?: ToppingOrderByWithRelationInput
  }

  export type PizzaToppingsWhereUniqueInput = Prisma.AtLeast<{
    pizzaId_toppingId?: PizzaToppingsPizzaIdToppingIdCompoundUniqueInput
    AND?: PizzaToppingsWhereInput | PizzaToppingsWhereInput[]
    OR?: PizzaToppingsWhereInput[]
    NOT?: PizzaToppingsWhereInput | PizzaToppingsWhereInput[]
    pizzaId?: IntFilter<"PizzaToppings"> | number
    toppingId?: IntFilter<"PizzaToppings"> | number
    pizza?: XOR<PizzaRelationFilter, PizzaWhereInput>
    topping?: XOR<ToppingRelationFilter, ToppingWhereInput>
  }, "pizzaId_toppingId">

  export type PizzaToppingsOrderByWithAggregationInput = {
    pizzaId?: SortOrder
    toppingId?: SortOrder
    _count?: PizzaToppingsCountOrderByAggregateInput
    _avg?: PizzaToppingsAvgOrderByAggregateInput
    _max?: PizzaToppingsMaxOrderByAggregateInput
    _min?: PizzaToppingsMinOrderByAggregateInput
    _sum?: PizzaToppingsSumOrderByAggregateInput
  }

  export type PizzaToppingsScalarWhereWithAggregatesInput = {
    AND?: PizzaToppingsScalarWhereWithAggregatesInput | PizzaToppingsScalarWhereWithAggregatesInput[]
    OR?: PizzaToppingsScalarWhereWithAggregatesInput[]
    NOT?: PizzaToppingsScalarWhereWithAggregatesInput | PizzaToppingsScalarWhereWithAggregatesInput[]
    pizzaId?: IntWithAggregatesFilter<"PizzaToppings"> | number
    toppingId?: IntWithAggregatesFilter<"PizzaToppings"> | number
  }

  export type OrderPizzasWhereInput = {
    AND?: OrderPizzasWhereInput | OrderPizzasWhereInput[]
    OR?: OrderPizzasWhereInput[]
    NOT?: OrderPizzasWhereInput | OrderPizzasWhereInput[]
    orderId?: IntFilter<"OrderPizzas"> | number
    pizzaId?: IntFilter<"OrderPizzas"> | number
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    pizza?: XOR<PizzaRelationFilter, PizzaWhereInput>
  }

  export type OrderPizzasOrderByWithRelationInput = {
    orderId?: SortOrder
    pizzaId?: SortOrder
    order?: OrderOrderByWithRelationInput
    pizza?: PizzaOrderByWithRelationInput
  }

  export type OrderPizzasWhereUniqueInput = Prisma.AtLeast<{
    orderId_pizzaId?: OrderPizzasOrderIdPizzaIdCompoundUniqueInput
    AND?: OrderPizzasWhereInput | OrderPizzasWhereInput[]
    OR?: OrderPizzasWhereInput[]
    NOT?: OrderPizzasWhereInput | OrderPizzasWhereInput[]
    orderId?: IntFilter<"OrderPizzas"> | number
    pizzaId?: IntFilter<"OrderPizzas"> | number
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    pizza?: XOR<PizzaRelationFilter, PizzaWhereInput>
  }, "orderId_pizzaId">

  export type OrderPizzasOrderByWithAggregationInput = {
    orderId?: SortOrder
    pizzaId?: SortOrder
    _count?: OrderPizzasCountOrderByAggregateInput
    _avg?: OrderPizzasAvgOrderByAggregateInput
    _max?: OrderPizzasMaxOrderByAggregateInput
    _min?: OrderPizzasMinOrderByAggregateInput
    _sum?: OrderPizzasSumOrderByAggregateInput
  }

  export type OrderPizzasScalarWhereWithAggregatesInput = {
    AND?: OrderPizzasScalarWhereWithAggregatesInput | OrderPizzasScalarWhereWithAggregatesInput[]
    OR?: OrderPizzasScalarWhereWithAggregatesInput[]
    NOT?: OrderPizzasScalarWhereWithAggregatesInput | OrderPizzasScalarWhereWithAggregatesInput[]
    orderId?: IntWithAggregatesFilter<"OrderPizzas"> | number
    pizzaId?: IntWithAggregatesFilter<"OrderPizzas"> | number
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    invited?: boolean
    orders?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    invited?: boolean
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    invited?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    invited?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    invited?: boolean
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    invited?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    invited?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ToppingCreateInput = {
    name: string
    pizzas?: PizzaToppingsCreateNestedManyWithoutToppingInput
  }

  export type ToppingUncheckedCreateInput = {
    id?: number
    name: string
    pizzas?: PizzaToppingsUncheckedCreateNestedManyWithoutToppingInput
  }

  export type ToppingUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    pizzas?: PizzaToppingsUpdateManyWithoutToppingNestedInput
  }

  export type ToppingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    pizzas?: PizzaToppingsUncheckedUpdateManyWithoutToppingNestedInput
  }

  export type ToppingCreateManyInput = {
    id?: number
    name: string
  }

  export type ToppingUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ToppingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PizzaCreateInput = {
    name: string
    toppings?: PizzaToppingsCreateNestedManyWithoutPizzaInput
    orders?: OrderPizzasCreateNestedManyWithoutPizzaInput
  }

  export type PizzaUncheckedCreateInput = {
    id?: number
    name: string
    toppings?: PizzaToppingsUncheckedCreateNestedManyWithoutPizzaInput
    orders?: OrderPizzasUncheckedCreateNestedManyWithoutPizzaInput
  }

  export type PizzaUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    toppings?: PizzaToppingsUpdateManyWithoutPizzaNestedInput
    orders?: OrderPizzasUpdateManyWithoutPizzaNestedInput
  }

  export type PizzaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    toppings?: PizzaToppingsUncheckedUpdateManyWithoutPizzaNestedInput
    orders?: OrderPizzasUncheckedUpdateManyWithoutPizzaNestedInput
  }

  export type PizzaCreateManyInput = {
    id?: number
    name: string
  }

  export type PizzaUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PizzaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateInput = {
    user: UserCreateNestedOneWithoutOrdersInput
    pizzas?: OrderPizzasCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    userId: number
    pizzas?: OrderPizzasUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    pizzas?: OrderPizzasUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    pizzas?: OrderPizzasUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: number
    userId: number
  }

  export type OrderUpdateManyMutationInput = {

  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type PizzaToppingsCreateInput = {
    pizza: PizzaCreateNestedOneWithoutToppingsInput
    topping: ToppingCreateNestedOneWithoutPizzasInput
  }

  export type PizzaToppingsUncheckedCreateInput = {
    pizzaId: number
    toppingId: number
  }

  export type PizzaToppingsUpdateInput = {
    pizza?: PizzaUpdateOneRequiredWithoutToppingsNestedInput
    topping?: ToppingUpdateOneRequiredWithoutPizzasNestedInput
  }

  export type PizzaToppingsUncheckedUpdateInput = {
    pizzaId?: IntFieldUpdateOperationsInput | number
    toppingId?: IntFieldUpdateOperationsInput | number
  }

  export type PizzaToppingsCreateManyInput = {
    pizzaId: number
    toppingId: number
  }

  export type PizzaToppingsUpdateManyMutationInput = {

  }

  export type PizzaToppingsUncheckedUpdateManyInput = {
    pizzaId?: IntFieldUpdateOperationsInput | number
    toppingId?: IntFieldUpdateOperationsInput | number
  }

  export type OrderPizzasCreateInput = {
    order: OrderCreateNestedOneWithoutPizzasInput
    pizza: PizzaCreateNestedOneWithoutOrdersInput
  }

  export type OrderPizzasUncheckedCreateInput = {
    orderId: number
    pizzaId: number
  }

  export type OrderPizzasUpdateInput = {
    order?: OrderUpdateOneRequiredWithoutPizzasNestedInput
    pizza?: PizzaUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderPizzasUncheckedUpdateInput = {
    orderId?: IntFieldUpdateOperationsInput | number
    pizzaId?: IntFieldUpdateOperationsInput | number
  }

  export type OrderPizzasCreateManyInput = {
    orderId: number
    pizzaId: number
  }

  export type OrderPizzasUpdateManyMutationInput = {

  }

  export type OrderPizzasUncheckedUpdateManyInput = {
    orderId?: IntFieldUpdateOperationsInput | number
    pizzaId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    invited?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    invited?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    invited?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PizzaToppingsListRelationFilter = {
    every?: PizzaToppingsWhereInput
    some?: PizzaToppingsWhereInput
    none?: PizzaToppingsWhereInput
  }

  export type PizzaToppingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ToppingCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ToppingAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ToppingMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ToppingMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ToppingSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OrderPizzasListRelationFilter = {
    every?: OrderPizzasWhereInput
    some?: OrderPizzasWhereInput
    none?: OrderPizzasWhereInput
  }

  export type OrderPizzasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PizzaCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PizzaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PizzaMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PizzaMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PizzaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PizzaRelationFilter = {
    is?: PizzaWhereInput
    isNot?: PizzaWhereInput
  }

  export type ToppingRelationFilter = {
    is?: ToppingWhereInput
    isNot?: ToppingWhereInput
  }

  export type PizzaToppingsPizzaIdToppingIdCompoundUniqueInput = {
    pizzaId: number
    toppingId: number
  }

  export type PizzaToppingsCountOrderByAggregateInput = {
    pizzaId?: SortOrder
    toppingId?: SortOrder
  }

  export type PizzaToppingsAvgOrderByAggregateInput = {
    pizzaId?: SortOrder
    toppingId?: SortOrder
  }

  export type PizzaToppingsMaxOrderByAggregateInput = {
    pizzaId?: SortOrder
    toppingId?: SortOrder
  }

  export type PizzaToppingsMinOrderByAggregateInput = {
    pizzaId?: SortOrder
    toppingId?: SortOrder
  }

  export type PizzaToppingsSumOrderByAggregateInput = {
    pizzaId?: SortOrder
    toppingId?: SortOrder
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type OrderPizzasOrderIdPizzaIdCompoundUniqueInput = {
    orderId: number
    pizzaId: number
  }

  export type OrderPizzasCountOrderByAggregateInput = {
    orderId?: SortOrder
    pizzaId?: SortOrder
  }

  export type OrderPizzasAvgOrderByAggregateInput = {
    orderId?: SortOrder
    pizzaId?: SortOrder
  }

  export type OrderPizzasMaxOrderByAggregateInput = {
    orderId?: SortOrder
    pizzaId?: SortOrder
  }

  export type OrderPizzasMinOrderByAggregateInput = {
    orderId?: SortOrder
    pizzaId?: SortOrder
  }

  export type OrderPizzasSumOrderByAggregateInput = {
    orderId?: SortOrder
    pizzaId?: SortOrder
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type PizzaToppingsCreateNestedManyWithoutToppingInput = {
    create?: XOR<PizzaToppingsCreateWithoutToppingInput, PizzaToppingsUncheckedCreateWithoutToppingInput> | PizzaToppingsCreateWithoutToppingInput[] | PizzaToppingsUncheckedCreateWithoutToppingInput[]
    connectOrCreate?: PizzaToppingsCreateOrConnectWithoutToppingInput | PizzaToppingsCreateOrConnectWithoutToppingInput[]
    createMany?: PizzaToppingsCreateManyToppingInputEnvelope
    connect?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
  }

  export type PizzaToppingsUncheckedCreateNestedManyWithoutToppingInput = {
    create?: XOR<PizzaToppingsCreateWithoutToppingInput, PizzaToppingsUncheckedCreateWithoutToppingInput> | PizzaToppingsCreateWithoutToppingInput[] | PizzaToppingsUncheckedCreateWithoutToppingInput[]
    connectOrCreate?: PizzaToppingsCreateOrConnectWithoutToppingInput | PizzaToppingsCreateOrConnectWithoutToppingInput[]
    createMany?: PizzaToppingsCreateManyToppingInputEnvelope
    connect?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
  }

  export type PizzaToppingsUpdateManyWithoutToppingNestedInput = {
    create?: XOR<PizzaToppingsCreateWithoutToppingInput, PizzaToppingsUncheckedCreateWithoutToppingInput> | PizzaToppingsCreateWithoutToppingInput[] | PizzaToppingsUncheckedCreateWithoutToppingInput[]
    connectOrCreate?: PizzaToppingsCreateOrConnectWithoutToppingInput | PizzaToppingsCreateOrConnectWithoutToppingInput[]
    upsert?: PizzaToppingsUpsertWithWhereUniqueWithoutToppingInput | PizzaToppingsUpsertWithWhereUniqueWithoutToppingInput[]
    createMany?: PizzaToppingsCreateManyToppingInputEnvelope
    set?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    disconnect?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    delete?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    connect?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    update?: PizzaToppingsUpdateWithWhereUniqueWithoutToppingInput | PizzaToppingsUpdateWithWhereUniqueWithoutToppingInput[]
    updateMany?: PizzaToppingsUpdateManyWithWhereWithoutToppingInput | PizzaToppingsUpdateManyWithWhereWithoutToppingInput[]
    deleteMany?: PizzaToppingsScalarWhereInput | PizzaToppingsScalarWhereInput[]
  }

  export type PizzaToppingsUncheckedUpdateManyWithoutToppingNestedInput = {
    create?: XOR<PizzaToppingsCreateWithoutToppingInput, PizzaToppingsUncheckedCreateWithoutToppingInput> | PizzaToppingsCreateWithoutToppingInput[] | PizzaToppingsUncheckedCreateWithoutToppingInput[]
    connectOrCreate?: PizzaToppingsCreateOrConnectWithoutToppingInput | PizzaToppingsCreateOrConnectWithoutToppingInput[]
    upsert?: PizzaToppingsUpsertWithWhereUniqueWithoutToppingInput | PizzaToppingsUpsertWithWhereUniqueWithoutToppingInput[]
    createMany?: PizzaToppingsCreateManyToppingInputEnvelope
    set?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    disconnect?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    delete?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    connect?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    update?: PizzaToppingsUpdateWithWhereUniqueWithoutToppingInput | PizzaToppingsUpdateWithWhereUniqueWithoutToppingInput[]
    updateMany?: PizzaToppingsUpdateManyWithWhereWithoutToppingInput | PizzaToppingsUpdateManyWithWhereWithoutToppingInput[]
    deleteMany?: PizzaToppingsScalarWhereInput | PizzaToppingsScalarWhereInput[]
  }

  export type PizzaToppingsCreateNestedManyWithoutPizzaInput = {
    create?: XOR<PizzaToppingsCreateWithoutPizzaInput, PizzaToppingsUncheckedCreateWithoutPizzaInput> | PizzaToppingsCreateWithoutPizzaInput[] | PizzaToppingsUncheckedCreateWithoutPizzaInput[]
    connectOrCreate?: PizzaToppingsCreateOrConnectWithoutPizzaInput | PizzaToppingsCreateOrConnectWithoutPizzaInput[]
    createMany?: PizzaToppingsCreateManyPizzaInputEnvelope
    connect?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
  }

  export type OrderPizzasCreateNestedManyWithoutPizzaInput = {
    create?: XOR<OrderPizzasCreateWithoutPizzaInput, OrderPizzasUncheckedCreateWithoutPizzaInput> | OrderPizzasCreateWithoutPizzaInput[] | OrderPizzasUncheckedCreateWithoutPizzaInput[]
    connectOrCreate?: OrderPizzasCreateOrConnectWithoutPizzaInput | OrderPizzasCreateOrConnectWithoutPizzaInput[]
    createMany?: OrderPizzasCreateManyPizzaInputEnvelope
    connect?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
  }

  export type PizzaToppingsUncheckedCreateNestedManyWithoutPizzaInput = {
    create?: XOR<PizzaToppingsCreateWithoutPizzaInput, PizzaToppingsUncheckedCreateWithoutPizzaInput> | PizzaToppingsCreateWithoutPizzaInput[] | PizzaToppingsUncheckedCreateWithoutPizzaInput[]
    connectOrCreate?: PizzaToppingsCreateOrConnectWithoutPizzaInput | PizzaToppingsCreateOrConnectWithoutPizzaInput[]
    createMany?: PizzaToppingsCreateManyPizzaInputEnvelope
    connect?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
  }

  export type OrderPizzasUncheckedCreateNestedManyWithoutPizzaInput = {
    create?: XOR<OrderPizzasCreateWithoutPizzaInput, OrderPizzasUncheckedCreateWithoutPizzaInput> | OrderPizzasCreateWithoutPizzaInput[] | OrderPizzasUncheckedCreateWithoutPizzaInput[]
    connectOrCreate?: OrderPizzasCreateOrConnectWithoutPizzaInput | OrderPizzasCreateOrConnectWithoutPizzaInput[]
    createMany?: OrderPizzasCreateManyPizzaInputEnvelope
    connect?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
  }

  export type PizzaToppingsUpdateManyWithoutPizzaNestedInput = {
    create?: XOR<PizzaToppingsCreateWithoutPizzaInput, PizzaToppingsUncheckedCreateWithoutPizzaInput> | PizzaToppingsCreateWithoutPizzaInput[] | PizzaToppingsUncheckedCreateWithoutPizzaInput[]
    connectOrCreate?: PizzaToppingsCreateOrConnectWithoutPizzaInput | PizzaToppingsCreateOrConnectWithoutPizzaInput[]
    upsert?: PizzaToppingsUpsertWithWhereUniqueWithoutPizzaInput | PizzaToppingsUpsertWithWhereUniqueWithoutPizzaInput[]
    createMany?: PizzaToppingsCreateManyPizzaInputEnvelope
    set?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    disconnect?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    delete?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    connect?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    update?: PizzaToppingsUpdateWithWhereUniqueWithoutPizzaInput | PizzaToppingsUpdateWithWhereUniqueWithoutPizzaInput[]
    updateMany?: PizzaToppingsUpdateManyWithWhereWithoutPizzaInput | PizzaToppingsUpdateManyWithWhereWithoutPizzaInput[]
    deleteMany?: PizzaToppingsScalarWhereInput | PizzaToppingsScalarWhereInput[]
  }

  export type OrderPizzasUpdateManyWithoutPizzaNestedInput = {
    create?: XOR<OrderPizzasCreateWithoutPizzaInput, OrderPizzasUncheckedCreateWithoutPizzaInput> | OrderPizzasCreateWithoutPizzaInput[] | OrderPizzasUncheckedCreateWithoutPizzaInput[]
    connectOrCreate?: OrderPizzasCreateOrConnectWithoutPizzaInput | OrderPizzasCreateOrConnectWithoutPizzaInput[]
    upsert?: OrderPizzasUpsertWithWhereUniqueWithoutPizzaInput | OrderPizzasUpsertWithWhereUniqueWithoutPizzaInput[]
    createMany?: OrderPizzasCreateManyPizzaInputEnvelope
    set?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    disconnect?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    delete?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    connect?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    update?: OrderPizzasUpdateWithWhereUniqueWithoutPizzaInput | OrderPizzasUpdateWithWhereUniqueWithoutPizzaInput[]
    updateMany?: OrderPizzasUpdateManyWithWhereWithoutPizzaInput | OrderPizzasUpdateManyWithWhereWithoutPizzaInput[]
    deleteMany?: OrderPizzasScalarWhereInput | OrderPizzasScalarWhereInput[]
  }

  export type PizzaToppingsUncheckedUpdateManyWithoutPizzaNestedInput = {
    create?: XOR<PizzaToppingsCreateWithoutPizzaInput, PizzaToppingsUncheckedCreateWithoutPizzaInput> | PizzaToppingsCreateWithoutPizzaInput[] | PizzaToppingsUncheckedCreateWithoutPizzaInput[]
    connectOrCreate?: PizzaToppingsCreateOrConnectWithoutPizzaInput | PizzaToppingsCreateOrConnectWithoutPizzaInput[]
    upsert?: PizzaToppingsUpsertWithWhereUniqueWithoutPizzaInput | PizzaToppingsUpsertWithWhereUniqueWithoutPizzaInput[]
    createMany?: PizzaToppingsCreateManyPizzaInputEnvelope
    set?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    disconnect?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    delete?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    connect?: PizzaToppingsWhereUniqueInput | PizzaToppingsWhereUniqueInput[]
    update?: PizzaToppingsUpdateWithWhereUniqueWithoutPizzaInput | PizzaToppingsUpdateWithWhereUniqueWithoutPizzaInput[]
    updateMany?: PizzaToppingsUpdateManyWithWhereWithoutPizzaInput | PizzaToppingsUpdateManyWithWhereWithoutPizzaInput[]
    deleteMany?: PizzaToppingsScalarWhereInput | PizzaToppingsScalarWhereInput[]
  }

  export type OrderPizzasUncheckedUpdateManyWithoutPizzaNestedInput = {
    create?: XOR<OrderPizzasCreateWithoutPizzaInput, OrderPizzasUncheckedCreateWithoutPizzaInput> | OrderPizzasCreateWithoutPizzaInput[] | OrderPizzasUncheckedCreateWithoutPizzaInput[]
    connectOrCreate?: OrderPizzasCreateOrConnectWithoutPizzaInput | OrderPizzasCreateOrConnectWithoutPizzaInput[]
    upsert?: OrderPizzasUpsertWithWhereUniqueWithoutPizzaInput | OrderPizzasUpsertWithWhereUniqueWithoutPizzaInput[]
    createMany?: OrderPizzasCreateManyPizzaInputEnvelope
    set?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    disconnect?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    delete?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    connect?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    update?: OrderPizzasUpdateWithWhereUniqueWithoutPizzaInput | OrderPizzasUpdateWithWhereUniqueWithoutPizzaInput[]
    updateMany?: OrderPizzasUpdateManyWithWhereWithoutPizzaInput | OrderPizzasUpdateManyWithWhereWithoutPizzaInput[]
    deleteMany?: OrderPizzasScalarWhereInput | OrderPizzasScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type OrderPizzasCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderPizzasCreateWithoutOrderInput, OrderPizzasUncheckedCreateWithoutOrderInput> | OrderPizzasCreateWithoutOrderInput[] | OrderPizzasUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderPizzasCreateOrConnectWithoutOrderInput | OrderPizzasCreateOrConnectWithoutOrderInput[]
    createMany?: OrderPizzasCreateManyOrderInputEnvelope
    connect?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
  }

  export type OrderPizzasUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderPizzasCreateWithoutOrderInput, OrderPizzasUncheckedCreateWithoutOrderInput> | OrderPizzasCreateWithoutOrderInput[] | OrderPizzasUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderPizzasCreateOrConnectWithoutOrderInput | OrderPizzasCreateOrConnectWithoutOrderInput[]
    createMany?: OrderPizzasCreateManyOrderInputEnvelope
    connect?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type OrderPizzasUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderPizzasCreateWithoutOrderInput, OrderPizzasUncheckedCreateWithoutOrderInput> | OrderPizzasCreateWithoutOrderInput[] | OrderPizzasUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderPizzasCreateOrConnectWithoutOrderInput | OrderPizzasCreateOrConnectWithoutOrderInput[]
    upsert?: OrderPizzasUpsertWithWhereUniqueWithoutOrderInput | OrderPizzasUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderPizzasCreateManyOrderInputEnvelope
    set?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    disconnect?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    delete?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    connect?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    update?: OrderPizzasUpdateWithWhereUniqueWithoutOrderInput | OrderPizzasUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderPizzasUpdateManyWithWhereWithoutOrderInput | OrderPizzasUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderPizzasScalarWhereInput | OrderPizzasScalarWhereInput[]
  }

  export type OrderPizzasUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderPizzasCreateWithoutOrderInput, OrderPizzasUncheckedCreateWithoutOrderInput> | OrderPizzasCreateWithoutOrderInput[] | OrderPizzasUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderPizzasCreateOrConnectWithoutOrderInput | OrderPizzasCreateOrConnectWithoutOrderInput[]
    upsert?: OrderPizzasUpsertWithWhereUniqueWithoutOrderInput | OrderPizzasUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderPizzasCreateManyOrderInputEnvelope
    set?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    disconnect?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    delete?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    connect?: OrderPizzasWhereUniqueInput | OrderPizzasWhereUniqueInput[]
    update?: OrderPizzasUpdateWithWhereUniqueWithoutOrderInput | OrderPizzasUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderPizzasUpdateManyWithWhereWithoutOrderInput | OrderPizzasUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderPizzasScalarWhereInput | OrderPizzasScalarWhereInput[]
  }

  export type PizzaCreateNestedOneWithoutToppingsInput = {
    create?: XOR<PizzaCreateWithoutToppingsInput, PizzaUncheckedCreateWithoutToppingsInput>
    connectOrCreate?: PizzaCreateOrConnectWithoutToppingsInput
    connect?: PizzaWhereUniqueInput
  }

  export type ToppingCreateNestedOneWithoutPizzasInput = {
    create?: XOR<ToppingCreateWithoutPizzasInput, ToppingUncheckedCreateWithoutPizzasInput>
    connectOrCreate?: ToppingCreateOrConnectWithoutPizzasInput
    connect?: ToppingWhereUniqueInput
  }

  export type PizzaUpdateOneRequiredWithoutToppingsNestedInput = {
    create?: XOR<PizzaCreateWithoutToppingsInput, PizzaUncheckedCreateWithoutToppingsInput>
    connectOrCreate?: PizzaCreateOrConnectWithoutToppingsInput
    upsert?: PizzaUpsertWithoutToppingsInput
    connect?: PizzaWhereUniqueInput
    update?: XOR<XOR<PizzaUpdateToOneWithWhereWithoutToppingsInput, PizzaUpdateWithoutToppingsInput>, PizzaUncheckedUpdateWithoutToppingsInput>
  }

  export type ToppingUpdateOneRequiredWithoutPizzasNestedInput = {
    create?: XOR<ToppingCreateWithoutPizzasInput, ToppingUncheckedCreateWithoutPizzasInput>
    connectOrCreate?: ToppingCreateOrConnectWithoutPizzasInput
    upsert?: ToppingUpsertWithoutPizzasInput
    connect?: ToppingWhereUniqueInput
    update?: XOR<XOR<ToppingUpdateToOneWithWhereWithoutPizzasInput, ToppingUpdateWithoutPizzasInput>, ToppingUncheckedUpdateWithoutPizzasInput>
  }

  export type OrderCreateNestedOneWithoutPizzasInput = {
    create?: XOR<OrderCreateWithoutPizzasInput, OrderUncheckedCreateWithoutPizzasInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPizzasInput
    connect?: OrderWhereUniqueInput
  }

  export type PizzaCreateNestedOneWithoutOrdersInput = {
    create?: XOR<PizzaCreateWithoutOrdersInput, PizzaUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: PizzaCreateOrConnectWithoutOrdersInput
    connect?: PizzaWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutPizzasNestedInput = {
    create?: XOR<OrderCreateWithoutPizzasInput, OrderUncheckedCreateWithoutPizzasInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPizzasInput
    upsert?: OrderUpsertWithoutPizzasInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutPizzasInput, OrderUpdateWithoutPizzasInput>, OrderUncheckedUpdateWithoutPizzasInput>
  }

  export type PizzaUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<PizzaCreateWithoutOrdersInput, PizzaUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: PizzaCreateOrConnectWithoutOrdersInput
    upsert?: PizzaUpsertWithoutOrdersInput
    connect?: PizzaWhereUniqueInput
    update?: XOR<XOR<PizzaUpdateToOneWithWhereWithoutOrdersInput, PizzaUpdateWithoutOrdersInput>, PizzaUncheckedUpdateWithoutOrdersInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type OrderCreateWithoutUserInput = {
    pizzas?: OrderPizzasCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: number
    pizzas?: OrderPizzasUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: IntFilter<"Order"> | number
    userId?: IntFilter<"Order"> | number
  }

  export type PizzaToppingsCreateWithoutToppingInput = {
    pizza: PizzaCreateNestedOneWithoutToppingsInput
  }

  export type PizzaToppingsUncheckedCreateWithoutToppingInput = {
    pizzaId: number
  }

  export type PizzaToppingsCreateOrConnectWithoutToppingInput = {
    where: PizzaToppingsWhereUniqueInput
    create: XOR<PizzaToppingsCreateWithoutToppingInput, PizzaToppingsUncheckedCreateWithoutToppingInput>
  }

  export type PizzaToppingsCreateManyToppingInputEnvelope = {
    data: PizzaToppingsCreateManyToppingInput | PizzaToppingsCreateManyToppingInput[]
    skipDuplicates?: boolean
  }

  export type PizzaToppingsUpsertWithWhereUniqueWithoutToppingInput = {
    where: PizzaToppingsWhereUniqueInput
    update: XOR<PizzaToppingsUpdateWithoutToppingInput, PizzaToppingsUncheckedUpdateWithoutToppingInput>
    create: XOR<PizzaToppingsCreateWithoutToppingInput, PizzaToppingsUncheckedCreateWithoutToppingInput>
  }

  export type PizzaToppingsUpdateWithWhereUniqueWithoutToppingInput = {
    where: PizzaToppingsWhereUniqueInput
    data: XOR<PizzaToppingsUpdateWithoutToppingInput, PizzaToppingsUncheckedUpdateWithoutToppingInput>
  }

  export type PizzaToppingsUpdateManyWithWhereWithoutToppingInput = {
    where: PizzaToppingsScalarWhereInput
    data: XOR<PizzaToppingsUpdateManyMutationInput, PizzaToppingsUncheckedUpdateManyWithoutToppingInput>
  }

  export type PizzaToppingsScalarWhereInput = {
    AND?: PizzaToppingsScalarWhereInput | PizzaToppingsScalarWhereInput[]
    OR?: PizzaToppingsScalarWhereInput[]
    NOT?: PizzaToppingsScalarWhereInput | PizzaToppingsScalarWhereInput[]
    pizzaId?: IntFilter<"PizzaToppings"> | number
    toppingId?: IntFilter<"PizzaToppings"> | number
  }

  export type PizzaToppingsCreateWithoutPizzaInput = {
    topping: ToppingCreateNestedOneWithoutPizzasInput
  }

  export type PizzaToppingsUncheckedCreateWithoutPizzaInput = {
    toppingId: number
  }

  export type PizzaToppingsCreateOrConnectWithoutPizzaInput = {
    where: PizzaToppingsWhereUniqueInput
    create: XOR<PizzaToppingsCreateWithoutPizzaInput, PizzaToppingsUncheckedCreateWithoutPizzaInput>
  }

  export type PizzaToppingsCreateManyPizzaInputEnvelope = {
    data: PizzaToppingsCreateManyPizzaInput | PizzaToppingsCreateManyPizzaInput[]
    skipDuplicates?: boolean
  }

  export type OrderPizzasCreateWithoutPizzaInput = {
    order: OrderCreateNestedOneWithoutPizzasInput
  }

  export type OrderPizzasUncheckedCreateWithoutPizzaInput = {
    orderId: number
  }

  export type OrderPizzasCreateOrConnectWithoutPizzaInput = {
    where: OrderPizzasWhereUniqueInput
    create: XOR<OrderPizzasCreateWithoutPizzaInput, OrderPizzasUncheckedCreateWithoutPizzaInput>
  }

  export type OrderPizzasCreateManyPizzaInputEnvelope = {
    data: OrderPizzasCreateManyPizzaInput | OrderPizzasCreateManyPizzaInput[]
    skipDuplicates?: boolean
  }

  export type PizzaToppingsUpsertWithWhereUniqueWithoutPizzaInput = {
    where: PizzaToppingsWhereUniqueInput
    update: XOR<PizzaToppingsUpdateWithoutPizzaInput, PizzaToppingsUncheckedUpdateWithoutPizzaInput>
    create: XOR<PizzaToppingsCreateWithoutPizzaInput, PizzaToppingsUncheckedCreateWithoutPizzaInput>
  }

  export type PizzaToppingsUpdateWithWhereUniqueWithoutPizzaInput = {
    where: PizzaToppingsWhereUniqueInput
    data: XOR<PizzaToppingsUpdateWithoutPizzaInput, PizzaToppingsUncheckedUpdateWithoutPizzaInput>
  }

  export type PizzaToppingsUpdateManyWithWhereWithoutPizzaInput = {
    where: PizzaToppingsScalarWhereInput
    data: XOR<PizzaToppingsUpdateManyMutationInput, PizzaToppingsUncheckedUpdateManyWithoutPizzaInput>
  }

  export type OrderPizzasUpsertWithWhereUniqueWithoutPizzaInput = {
    where: OrderPizzasWhereUniqueInput
    update: XOR<OrderPizzasUpdateWithoutPizzaInput, OrderPizzasUncheckedUpdateWithoutPizzaInput>
    create: XOR<OrderPizzasCreateWithoutPizzaInput, OrderPizzasUncheckedCreateWithoutPizzaInput>
  }

  export type OrderPizzasUpdateWithWhereUniqueWithoutPizzaInput = {
    where: OrderPizzasWhereUniqueInput
    data: XOR<OrderPizzasUpdateWithoutPizzaInput, OrderPizzasUncheckedUpdateWithoutPizzaInput>
  }

  export type OrderPizzasUpdateManyWithWhereWithoutPizzaInput = {
    where: OrderPizzasScalarWhereInput
    data: XOR<OrderPizzasUpdateManyMutationInput, OrderPizzasUncheckedUpdateManyWithoutPizzaInput>
  }

  export type OrderPizzasScalarWhereInput = {
    AND?: OrderPizzasScalarWhereInput | OrderPizzasScalarWhereInput[]
    OR?: OrderPizzasScalarWhereInput[]
    NOT?: OrderPizzasScalarWhereInput | OrderPizzasScalarWhereInput[]
    orderId?: IntFilter<"OrderPizzas"> | number
    pizzaId?: IntFilter<"OrderPizzas"> | number
  }

  export type UserCreateWithoutOrdersInput = {
    name: string
    email: string
    password: string
    invited?: boolean
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: number
    name: string
    email: string
    password: string
    invited?: boolean
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type OrderPizzasCreateWithoutOrderInput = {
    pizza: PizzaCreateNestedOneWithoutOrdersInput
  }

  export type OrderPizzasUncheckedCreateWithoutOrderInput = {
    pizzaId: number
  }

  export type OrderPizzasCreateOrConnectWithoutOrderInput = {
    where: OrderPizzasWhereUniqueInput
    create: XOR<OrderPizzasCreateWithoutOrderInput, OrderPizzasUncheckedCreateWithoutOrderInput>
  }

  export type OrderPizzasCreateManyOrderInputEnvelope = {
    data: OrderPizzasCreateManyOrderInput | OrderPizzasCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    invited?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    invited?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderPizzasUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderPizzasWhereUniqueInput
    update: XOR<OrderPizzasUpdateWithoutOrderInput, OrderPizzasUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderPizzasCreateWithoutOrderInput, OrderPizzasUncheckedCreateWithoutOrderInput>
  }

  export type OrderPizzasUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderPizzasWhereUniqueInput
    data: XOR<OrderPizzasUpdateWithoutOrderInput, OrderPizzasUncheckedUpdateWithoutOrderInput>
  }

  export type OrderPizzasUpdateManyWithWhereWithoutOrderInput = {
    where: OrderPizzasScalarWhereInput
    data: XOR<OrderPizzasUpdateManyMutationInput, OrderPizzasUncheckedUpdateManyWithoutOrderInput>
  }

  export type PizzaCreateWithoutToppingsInput = {
    name: string
    orders?: OrderPizzasCreateNestedManyWithoutPizzaInput
  }

  export type PizzaUncheckedCreateWithoutToppingsInput = {
    id?: number
    name: string
    orders?: OrderPizzasUncheckedCreateNestedManyWithoutPizzaInput
  }

  export type PizzaCreateOrConnectWithoutToppingsInput = {
    where: PizzaWhereUniqueInput
    create: XOR<PizzaCreateWithoutToppingsInput, PizzaUncheckedCreateWithoutToppingsInput>
  }

  export type ToppingCreateWithoutPizzasInput = {
    name: string
  }

  export type ToppingUncheckedCreateWithoutPizzasInput = {
    id?: number
    name: string
  }

  export type ToppingCreateOrConnectWithoutPizzasInput = {
    where: ToppingWhereUniqueInput
    create: XOR<ToppingCreateWithoutPizzasInput, ToppingUncheckedCreateWithoutPizzasInput>
  }

  export type PizzaUpsertWithoutToppingsInput = {
    update: XOR<PizzaUpdateWithoutToppingsInput, PizzaUncheckedUpdateWithoutToppingsInput>
    create: XOR<PizzaCreateWithoutToppingsInput, PizzaUncheckedCreateWithoutToppingsInput>
    where?: PizzaWhereInput
  }

  export type PizzaUpdateToOneWithWhereWithoutToppingsInput = {
    where?: PizzaWhereInput
    data: XOR<PizzaUpdateWithoutToppingsInput, PizzaUncheckedUpdateWithoutToppingsInput>
  }

  export type PizzaUpdateWithoutToppingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    orders?: OrderPizzasUpdateManyWithoutPizzaNestedInput
  }

  export type PizzaUncheckedUpdateWithoutToppingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    orders?: OrderPizzasUncheckedUpdateManyWithoutPizzaNestedInput
  }

  export type ToppingUpsertWithoutPizzasInput = {
    update: XOR<ToppingUpdateWithoutPizzasInput, ToppingUncheckedUpdateWithoutPizzasInput>
    create: XOR<ToppingCreateWithoutPizzasInput, ToppingUncheckedCreateWithoutPizzasInput>
    where?: ToppingWhereInput
  }

  export type ToppingUpdateToOneWithWhereWithoutPizzasInput = {
    where?: ToppingWhereInput
    data: XOR<ToppingUpdateWithoutPizzasInput, ToppingUncheckedUpdateWithoutPizzasInput>
  }

  export type ToppingUpdateWithoutPizzasInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ToppingUncheckedUpdateWithoutPizzasInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OrderCreateWithoutPizzasInput = {
    user: UserCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutPizzasInput = {
    id?: number
    userId: number
  }

  export type OrderCreateOrConnectWithoutPizzasInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutPizzasInput, OrderUncheckedCreateWithoutPizzasInput>
  }

  export type PizzaCreateWithoutOrdersInput = {
    name: string
    toppings?: PizzaToppingsCreateNestedManyWithoutPizzaInput
  }

  export type PizzaUncheckedCreateWithoutOrdersInput = {
    id?: number
    name: string
    toppings?: PizzaToppingsUncheckedCreateNestedManyWithoutPizzaInput
  }

  export type PizzaCreateOrConnectWithoutOrdersInput = {
    where: PizzaWhereUniqueInput
    create: XOR<PizzaCreateWithoutOrdersInput, PizzaUncheckedCreateWithoutOrdersInput>
  }

  export type OrderUpsertWithoutPizzasInput = {
    update: XOR<OrderUpdateWithoutPizzasInput, OrderUncheckedUpdateWithoutPizzasInput>
    create: XOR<OrderCreateWithoutPizzasInput, OrderUncheckedCreateWithoutPizzasInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutPizzasInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutPizzasInput, OrderUncheckedUpdateWithoutPizzasInput>
  }

  export type OrderUpdateWithoutPizzasInput = {
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutPizzasInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type PizzaUpsertWithoutOrdersInput = {
    update: XOR<PizzaUpdateWithoutOrdersInput, PizzaUncheckedUpdateWithoutOrdersInput>
    create: XOR<PizzaCreateWithoutOrdersInput, PizzaUncheckedCreateWithoutOrdersInput>
    where?: PizzaWhereInput
  }

  export type PizzaUpdateToOneWithWhereWithoutOrdersInput = {
    where?: PizzaWhereInput
    data: XOR<PizzaUpdateWithoutOrdersInput, PizzaUncheckedUpdateWithoutOrdersInput>
  }

  export type PizzaUpdateWithoutOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    toppings?: PizzaToppingsUpdateManyWithoutPizzaNestedInput
  }

  export type PizzaUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    toppings?: PizzaToppingsUncheckedUpdateManyWithoutPizzaNestedInput
  }

  export type OrderCreateManyUserInput = {
    id?: number
  }

  export type OrderUpdateWithoutUserInput = {
    pizzas?: OrderPizzasUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    pizzas?: OrderPizzasUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type PizzaToppingsCreateManyToppingInput = {
    pizzaId: number
  }

  export type PizzaToppingsUpdateWithoutToppingInput = {
    pizza?: PizzaUpdateOneRequiredWithoutToppingsNestedInput
  }

  export type PizzaToppingsUncheckedUpdateWithoutToppingInput = {
    pizzaId?: IntFieldUpdateOperationsInput | number
  }

  export type PizzaToppingsUncheckedUpdateManyWithoutToppingInput = {
    pizzaId?: IntFieldUpdateOperationsInput | number
  }

  export type PizzaToppingsCreateManyPizzaInput = {
    toppingId: number
  }

  export type OrderPizzasCreateManyPizzaInput = {
    orderId: number
  }

  export type PizzaToppingsUpdateWithoutPizzaInput = {
    topping?: ToppingUpdateOneRequiredWithoutPizzasNestedInput
  }

  export type PizzaToppingsUncheckedUpdateWithoutPizzaInput = {
    toppingId?: IntFieldUpdateOperationsInput | number
  }

  export type PizzaToppingsUncheckedUpdateManyWithoutPizzaInput = {
    toppingId?: IntFieldUpdateOperationsInput | number
  }

  export type OrderPizzasUpdateWithoutPizzaInput = {
    order?: OrderUpdateOneRequiredWithoutPizzasNestedInput
  }

  export type OrderPizzasUncheckedUpdateWithoutPizzaInput = {
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type OrderPizzasUncheckedUpdateManyWithoutPizzaInput = {
    orderId?: IntFieldUpdateOperationsInput | number
  }

  export type OrderPizzasCreateManyOrderInput = {
    pizzaId: number
  }

  export type OrderPizzasUpdateWithoutOrderInput = {
    pizza?: PizzaUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderPizzasUncheckedUpdateWithoutOrderInput = {
    pizzaId?: IntFieldUpdateOperationsInput | number
  }

  export type OrderPizzasUncheckedUpdateManyWithoutOrderInput = {
    pizzaId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ToppingCountOutputTypeDefaultArgs instead
     */
    export type ToppingCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ToppingCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PizzaCountOutputTypeDefaultArgs instead
     */
    export type PizzaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PizzaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderCountOutputTypeDefaultArgs instead
     */
    export type OrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ToppingDefaultArgs instead
     */
    export type ToppingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ToppingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PizzaDefaultArgs instead
     */
    export type PizzaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PizzaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderDefaultArgs instead
     */
    export type OrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PizzaToppingsDefaultArgs instead
     */
    export type PizzaToppingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PizzaToppingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderPizzasDefaultArgs instead
     */
    export type OrderPizzasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderPizzasDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}